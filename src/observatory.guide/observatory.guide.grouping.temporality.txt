%    __NOPUBLISH__
% HEADER: Temporality



"the railroad, which worked a revolutionary change in civilization. It increased the tempo of business 
activities. . . . The foundation on which our business is built is the saving of time for all people 
and all industries throughout the world, to give more time in which to do given tasks, and to make 
available more time for still further advancement and progress. The railroads and [IBM] . . . have 
a common mission—both function to increase the profi ts and accelerate the progress of business 
by conserving the most precious of all commodities—T I M E."
> [@harwood:2011:ibm]
% p102, Harwood, 2011

> The concept of time sharing was developed in the 
> late 1950s, mainly motivated by the aim to make efficient use of 
> expensive mainframe computers by avoiding idle times. Time 
> sharing refers to the (seemingly) simultaneous access of multiple 
> users that are connected via terminals to a central computer, 
> technically based on the flexible allocation of CPU time to concurrent user processes.
> The first experimental implementation, the 
> Compatible Time Sharing System
>  (CTSS), was deployed at the 
> MIT in 1961 on an IBM 709 computer,
[@neubert:2017:timesharing]
> [...] machines have their natural cycle: the vibrating pulses of its  internal clock drives the cycles according to which the processor works.  The time of the computer is linked to this clock cycle, as it consists  in counting cyclical ticks. This produces a cyclical time rhythm in the  hardware, on which time experience in the software is based.
> However, time in a computer is no unique or unified experience. Several hardware components and a diverse collection of software  organised in layers and processes create a whole ecology of  interdependent time experiences. The operating system experiences other  software components, and users through them, as a bunch of processes  screaming for attention. One of the most pushy interrupts is the timer  forcing the processor to count another click and update the system time.  An internal kernel process performs the negotiation of time through  which the clock count is linked with a system time.
> This system time gets communicated to all other processes when  demanded. But the process time is completely different. Most of the time  processes are put on hold and when the scheduler gives them time they  can proceed till the next on hold is forced to make time for another  process. The scheduler is the big organiser of time in the internal ecology of processes.
> [@lammerant:2017:tgsotime]
% Lammerant, 2017

>F/LUX is a meant to bring personal / environmental time into your software. It's developed by two ex-Google employees. It allows you to specify a location to filter your computer display to reflect a fading of day to night. F.lux is revolutionary because it injects a local temporality within the homogeneous flow produced by the digital experience. It made me think of the book 24/7 where Jonathan Crary describes how sleep constitutes "an uncompromising interruption of the theft of time from us by capitalism."
% from etherpad

> Real time and process time
> Real time is defined as time measured from some fixed point,  either from a standard point in the past (see the description of the  Epoch and calendar time below), or from some point (e.g., the start) in the life of a  process (elapsed time). 
> Process time is defined as the amount of CPU time used by a process. This is sometimes divided into user and system  components. User CPU time is the time spent executing code in user mode. System CPU time  is the time spent by the kernel executing in system mode on behalf of  the process (e.g., executing system calls). The time(1) command can be used to determine the amount of CPU time consumed during the execution of a program. A program can determine the amount of CPU time it has consumed using times(2), getrusage(2), or clock(3). 
> The hardware clock
> Most computers have a (battery-powered) hardware clock which the  kernel reads at boot time in order to initialize the software clock. For  further details, see rtc(4) and hwclock(8). 
[@linuxman]
% linux time manual page accessed at https://linux.die.net/man/


