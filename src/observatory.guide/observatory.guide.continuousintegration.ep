{"pad:observatory.guide.continuousintegration:revs:0":{"changeset":"Z:1>2ia|p+2ia$% METHOD: Continuous integration\n\n% WHAT:  Continuous integration is a sophisticated form of responsibility management: it is the fascia of services. Continous integration picks up after all other services and identifies what needs to happen so that they can work in concert. Continuous integration is a way of observing the evolution of (micro)services through cybernetic (micro)management. \n% HOW: Continuous integration keeps track of changes to all services and allows everyone to observe if they still can work together after all the moving parts are fitted together.\n% WHEN: Continuous integration comes to prominence in a world of distributed systems where there are many parts being organized simultaneously. Continuous integration is a form of observation that helps (micro)services maintain a false sense of independence and decentralization while constantly subjecting them to centralized feedback. \n% WHO: Continuous integration assumes that all services will submit themselves to the feedback loops of continuous integration. This could be a democratic process or not. \n%URGENCY: Continuous integration reconfigures divisions of labor in the shadows of automation. How can we surface and question its doings and undoings?\n% WARNING: When each service does one thing well, the service makers tend to assume everybody else is doing the things they do not want to do.\n\n% EXAMPLE: \nAt TGSO continuous integration was introduced as a service that responds to integration hell when putting together a number of TGSO services for a walk-in software clinic. Due to demand, the continuous integration service was extended to do \"service discovery\" and \"load balancing\" once the walk-in clinic was in operation. \n\nContinuous integration worked by visiting the different services of the walk-in clinic to check for updates, test the functionality and think through implications of integration with other services. If the pieces didn't fit, continuous integration delivered error messages and solution options. \n\nWhen we noticed that software curious persons visiting the walk-in clinic may have troubles finding the different services, and that some services may be overloaded with software curious persons, continuous integration was extended. We automated service registration using colored tape and provided a lookup registry for software curious persons. \n% Add some images of the tape and color coded sheet.\nhttp://gallery.constantvzw.org/index.php/Techno-Galactic-Software-Observatory/IMAG1404\n\nLoad balancing meant that software curious persons were forwarded to services that had capacity. If all other services were full, the load balancer defaulted to sending the software curious person to the [Agile Sun Salutation](http://pad.constantvzw.org/p/observatory.guide.agile.yoga) service.\n\n% WARNING: At TGSO the bundling of different functionalities into the continuous integration service broke the \"do one thing well\" principle, but saved the day (we register this as technical debt for the next iteration of the walk-in clinic).\n\n% SEEALSO:\n% SOURCE: While continous integration held the day together, we are sorry to report that her work is only documented in images and in the choreography of the day but not in any of our writings. \n\n","meta":{"author":"","timestamp":1512742101036,"atext":{"text":"% METHOD: Continuous integration\n\n% WHAT:  Continuous integration is a sophisticated form of responsibility management: it is the fascia of services. Continous integration picks up after all other services and identifies what needs to happen so that they can work in concert. Continuous integration is a way of observing the evolution of (micro)services through cybernetic (micro)management. \n% HOW: Continuous integration keeps track of changes to all services and allows everyone to observe if they still can work together after all the moving parts are fitted together.\n% WHEN: Continuous integration comes to prominence in a world of distributed systems where there are many parts being organized simultaneously. Continuous integration is a form of observation that helps (micro)services maintain a false sense of independence and decentralization while constantly subjecting them to centralized feedback. \n% WHO: Continuous integration assumes that all services will submit themselves to the feedback loops of continuous integration. This could be a democratic process or not. \n%URGENCY: Continuous integration reconfigures divisions of labor in the shadows of automation. How can we surface and question its doings and undoings?\n% WARNING: When each service does one thing well, the service makers tend to assume everybody else is doing the things they do not want to do.\n\n% EXAMPLE: \nAt TGSO continuous integration was introduced as a service that responds to integration hell when putting together a number of TGSO services for a walk-in software clinic. Due to demand, the continuous integration service was extended to do \"service discovery\" and \"load balancing\" once the walk-in clinic was in operation. \n\nContinuous integration worked by visiting the different services of the walk-in clinic to check for updates, test the functionality and think through implications of integration with other services. If the pieces didn't fit, continuous integration delivered error messages and solution options. \n\nWhen we noticed that software curious persons visiting the walk-in clinic may have troubles finding the different services, and that some services may be overloaded with software curious persons, continuous integration was extended. We automated service registration using colored tape and provided a lookup registry for software curious persons. \n% Add some images of the tape and color coded sheet.\nhttp://gallery.constantvzw.org/index.php/Techno-Galactic-Software-Observatory/IMAG1404\n\nLoad balancing meant that software curious persons were forwarded to services that had capacity. If all other services were full, the load balancer defaulted to sending the software curious person to the [Agile Sun Salutation](http://pad.constantvzw.org/p/observatory.guide.agile.yoga) service.\n\n% WARNING: At TGSO the bundling of different functionalities into the continuous integration service broke the \"do one thing well\" principle, but saved the day (we register this as technical debt for the next iteration of the walk-in clinic).\n\n% SEEALSO:\n% SOURCE: While continous integration held the day together, we are sorry to report that her work is only documented in images and in the choreography of the day but not in any of our writings. \n\n\n","attribs":"|q+2ib"}}},"pad:observatory.guide.continuousintegration:revs:1":{"changeset":"Z:2ib>9w|p=2ia|4+9w$% REMEMBER: Continous integration may be the string that holds your current software galaxy together.\n\n% Software Curious Person expressing her hopes for Continuous Integration\n\"More technically, I am interested in how things bounce around in computer systems. I am not sure if these two things are relted, but I hope continuous integration will help me.\"\n","meta":{"author":"","timestamp":1512742101123}},"pad:observatory.guide.continuousintegration:revs:2":{"changeset":"Z:2s7<9x|u-2s7|p+2ia$% METHOD: Continuous integration\n\n% WHAT:  Continuous integration is a sophisticated form of responsibility management: it is the fascia of services. Continous integration picks up after all other services and identifies what needs to happen so that they can work in concert. Continuous integration is a way of observing the evolution of (micro)services through cybernetic (micro)management. \n% HOW: Continuous integration keeps track of changes to all services and allows everyone to observe if they still can work together after all the moving parts are fitted together.\n% WHEN: Continuous integration comes to prominence in a world of distributed systems where there are many parts being organized simultaneously. Continuous integration is a form of observation that helps (micro)services maintain a false sense of independence and decentralization while constantly subjecting them to centralized feedback. \n% WHO: Continuous integration assumes that all services will submit themselves to the feedback loops of continuous integration. This could be a democratic process or not. \n%URGENCY: Continuous integration reconfigures divisions of labor in the shadows of automation. How can we surface and question its doings and undoings?\n% WARNING: When each service does one thing well, the service makers tend to assume everybody else is doing the things they do not want to do.\n\n% EXAMPLE: \nAt TGSO continuous integration was introduced as a service that responds to integration hell when putting together a number of TGSO services for a walk-in software clinic. Due to demand, the continuous integration service was extended to do \"service discovery\" and \"load balancing\" once the walk-in clinic was in operation. \n\nContinuous integration worked by visiting the different services of the walk-in clinic to check for updates, test the functionality and think through implications of integration with other services. If the pieces didn't fit, continuous integration delivered error messages and solution options. \n\nWhen we noticed that software curious persons visiting the walk-in clinic may have troubles finding the different services, and that some services may be overloaded with software curious persons, continuous integration was extended. We automated service registration using colored tape and provided a lookup registry for software curious persons. \n% Add some images of the tape and color coded sheet.\nhttp://gallery.constantvzw.org/index.php/Techno-Galactic-Software-Observatory/IMAG1404\n\nLoad balancing meant that software curious persons were forwarded to services that had capacity. If all other services were full, the load balancer defaulted to sending the software curious person to the [Agile Sun Salutation](http://pad.constantvzw.org/p/observatory.guide.agile.yoga) service.\n\n% WARNING: At TGSO the bundling of different functionalities into the continuous integration service broke the \"do one thing well\" principle, but saved the day (we register this as technical debt for the next iteration of the walk-in clinic).\n\n% SEEALSO:\n% SOURCE: While continous integration held the day together, we are sorry to report that her work is only documented in images and in the choreography of the day but not in any of our writings. \n\n","meta":{"author":"","timestamp":1513950484527}},"pad:observatory.guide.continuousintegration:revs:3":{"changeset":"Z:2ia>9w|o=2i9|4+9w$% REMEMBER: Continous integration may be the string that holds your current software galaxy together.\n\n% Software Curious Person expressing her hopes for Continuous Integration\n\"More technically, I am interested in how things bounce around in computer systems. I am not sure if these two things are relted, but I hope continuous integration will help me.\"\n","meta":{"author":"","timestamp":1513950484606}},"pad:observatory.guide.continuousintegration":{"atext":{"text":"% METHOD: Continuous integration\n\n% WHAT:  Continuous integration is a sophisticated form of responsibility management: it is the fascia of services. Continous integration picks up after all other services and identifies what needs to happen so that they can work in concert. Continuous integration is a way of observing the evolution of (micro)services through cybernetic (micro)management. \n% HOW: Continuous integration keeps track of changes to all services and allows everyone to observe if they still can work together after all the moving parts are fitted together.\n% WHEN: Continuous integration comes to prominence in a world of distributed systems where there are many parts being organized simultaneously. Continuous integration is a form of observation that helps (micro)services maintain a false sense of independence and decentralization while constantly subjecting them to centralized feedback. \n% WHO: Continuous integration assumes that all services will submit themselves to the feedback loops of continuous integration. This could be a democratic process or not. \n%URGENCY: Continuous integration reconfigures divisions of labor in the shadows of automation. How can we surface and question its doings and undoings?\n% WARNING: When each service does one thing well, the service makers tend to assume everybody else is doing the things they do not want to do.\n\n% EXAMPLE: \nAt TGSO continuous integration was introduced as a service that responds to integration hell when putting together a number of TGSO services for a walk-in software clinic. Due to demand, the continuous integration service was extended to do \"service discovery\" and \"load balancing\" once the walk-in clinic was in operation. \n\nContinuous integration worked by visiting the different services of the walk-in clinic to check for updates, test the functionality and think through implications of integration with other services. If the pieces didn't fit, continuous integration delivered error messages and solution options. \n\nWhen we noticed that software curious persons visiting the walk-in clinic may have troubles finding the different services, and that some services may be overloaded with software curious persons, continuous integration was extended. We automated service registration using colored tape and provided a lookup registry for software curious persons. \n% Add some images of the tape and color coded sheet.\nhttp://gallery.constantvzw.org/index.php/Techno-Galactic-Software-Observatory/IMAG1404\n\nLoad balancing meant that software curious persons were forwarded to services that had capacity. If all other services were full, the load balancer defaulted to sending the software curious person to the [Agile Sun Salutation](http://pad.constantvzw.org/p/observatory.guide.agile.yoga) service.\n\n% WARNING: At TGSO the bundling of different functionalities into the continuous integration service broke the \"do one thing well\" principle, but saved the day (we register this as technical debt for the next iteration of the walk-in clinic).\n\n% SEEALSO:\n% SOURCE: While continous integration held the day together, we are sorry to report that her work is only documented in images and in the choreography of the day but not in any of our writings. \n% REMEMBER: Continous integration may be the string that holds your current software galaxy together.\n\n% Software Curious Person expressing her hopes for Continuous Integration\n\"More technically, I am interested in how things bounce around in computer systems. I am not sure if these two things are relted, but I hope continuous integration will help me.\"\n\n","attribs":"|t+2s6"},"pool":{"numToAttrib":{},"nextNum":0},"head":3,"chatHead":-1,"publicStatus":false,"passwordHash":null,"savedRevisions":[]}}