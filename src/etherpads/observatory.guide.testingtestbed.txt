% METHOD: Testing the testbed: testing software with observatory ambitions (SWOA)

% WHAT: Observing Software With Observatory Ambitions (SWOA).

% HOW: The interwebs hosts many projects that aim to produce software for observing software, or simply Software with Observatory Ambitions. A comparative methodology can be produced by testing different SWOA to observe software of interest. Comparing SWOA reveals what is considered as worthy of observation (e.g., what protocols, what space, which devices), the granularity of the observation (e.g., how is the observation captured, in what detail), the logo and conceptual framework of choice that underlies the SWOA, as well as its architecture (e.g., gradware, SWOA as a service). Observing SWOAs puts their observatory ambitions to the test. It enables an analysis of what is made transparent, what is made invisible, and how, as a result, SWOAs can reconfigure power.  

% WHEN: Ideally, SWOA can be comparatively observed whenever you feel the urge.  

% WARNING: Institutions, laws, and administrators like to limit the use of SWOA to people who are running these networks. Hence, we are presented with the situation that the use of SWOA is condoned when it is done by researchers and pen testers (i.e., they were hired) and shunned when done by others (often subject to name-calling as hackers or attackers). This may hamper your ability to observe SWOA at work.

% WHO: If you can run multiple SWOAs, you can do it.

% WARNING: We find that observation can surface power asymmetries and lead to defensiveness or desires to escape the observation in the case of the observed, or an instinct to try to conceal that observation is taking place. Will people like it if you turn your gaze on their SWOA?  

% NOTE: Good SWOA uses an animal as a logo.  

% WARNING: Many of the SWOA projects we looked at are promises more than running software or available code. Much of it is obsolete gradware, making observation difficult.  

% REMEMBER: Most software has a recursive observatory ambition (it wants to be observed in its execution, output etc.). Debuggers, logs, dashboards are all instances of software with observatory ambitions. Continuous integration is the act of folding the whole software development process into one big feedback loop. So, what separates SWOA from software itself? Is it the intention of observing software with a critical, agonistic or adversarial perspective vs. one focused on productivity and efficiency?  

% SOURCE: The "original testbed" was proposed by collaborators at Princeton University. Testing this particular testbed happened at a workshop in Brussels organized by Constant[^]{http://constantvzw.org/site/Testing-the-testbed,2739.html}.

% EXAMPLE: To elucidate this method further, one can take a look at the [Something in the Middle Maybe], which is an instance of a SWOA. To complete a comparative analysis use different sniffing software to observe wireless networks, e.g., wireshark vs tcpdump vs SitMM.  

% RELATESTO: http://pad.constantvzw.org/p/observatory.guide.bestiary 
% RELATESTO: http://pad.constantvzw.org/p/observatory.guide.somethinginthemiddlemaybe
