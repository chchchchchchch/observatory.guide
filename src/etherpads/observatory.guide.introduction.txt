% TOCITEM: Introduction T:4

# The Techno-Galactic Software Survival Guide

% CARLINSAYS: We still need to agree on a title. I have chosen one so that it is consistent for now.
> I am less interested in the critical practice of reflection,
> of showing once-again that the emperor has no clothes, than in
> finding a way to diffract critical inquiry in order to make
> difference patterns in a more worldly way.
> [@haraway:1996:witness]

A spectre is haunting the galaxy. It is not revolutionary [@marx:1848:cmanifesto]. It is not just another global scale vulnerability [@meltdown:2018:spectre17]. But no matter where you happen to be, there is the spectre of a software running somewhere in the background. Look! There it is, staring right back at you. Be it your phone screen or a passing satellite, software's observation and entanglement in the everyday appears complete. But is it so total? Let's look more closely. 

We find ourselves in a universe built on a 1990s revival of a 1960s dream: software as a service (SaaS) [@haigh:2001:soft60]. In this online universe, the use of software has increasingly been knitted into the production of software, even while the rhetoric, rights, and procedures that proliferate in this universe continue to suggest that software production and consumption constitute separate realms. This knitting together and its corresponding disavowal radically alters the operative role of software in society. The corresponding shifts ripple across galaxies, through social structures, working conditions, and trans-universal logistics (%CARLINSAYS: what are "trans-universal logistics?"), resulting in a profusion of apparatuses that aspire to be seamless while optimizing and monetizing individual and collective flows of information in line with the interests of a handful of actors. The diffusion of software services affects individuals and communities in the form of intensified identity shaping and self-management, and transforms the public by capturing institutions and common use infrastructures in short cut visions of start-ups or the inertia of tech giants. As more and more software centralizes data flows in ‘cloud services’ (%CARLINSAYS: this is one of those single quotations examples which Christoph suggests turning into italics. I think this is a good solution), effectively collapsing all societal spheres into the same processing logic, their service oriented architectures come to blur the last traces of the thin line separating bio- from necro-politics.[@hu:2015:prehistory]

And so software spins its web around us. As it twists we turn, reflexively trying to take some distance, only to realize that we are too well tangled in its gooey net. Caught upside down and dangling we ask: How can we interact, respond to, and think with software? What approaches can we use to recognize the agency of different actors, their ways of working, and their politics? What methods of observation are conducive to critical inquiry and affirmative discord? How can we resurface software and find sites where its infrastructures are reconfiguring the everyday? How can we take stock of the ways software is always at work, especially where it is designed to disappear into the background? 

Bowled over by these questions, by constant pop-ups and push notifications, a fantasy takes shape of smashing our devices with a sledge hammer, throwing them in the river, retreating off grid and out of sight, and living software free lives. But this is a fantasy that cannot hold. It cannot hold us. Perhaps it is available to the tech-billionaires building and stocking bunkers, but for most of the people in the world, for the many non-humans inhabitants of this galaxy, and even for those who have experienced that irresistible lightness of a software tantrum resulting ina proximate smart device being catapulted into fatal flight, it is not going to do it. We are in search of a better fantasy: one that lets us poke and push back on the specter that insists onsaturating and surrounding us.

The Techno-Galactic Software Survival Guide (% CARLINSAYS: use agreed title) is an obsessive fantasy of optimization turned on its head and stuck to the ceiling of a self-reflecting elevator. It is the ultimate book of dos and don'ts, of forgotten histories and un-inevitable futures, of mindful agile actions and improvisational service architectures, of any and all things that you can and cannot imagine needing in a techno-galaxy. We are techno-galactic in order to meet the contemporary paradigms of computation that proudly announce their capability for "scaling up to the universe." We stand here as modest witnesses to the multitude of scales of software communities and their related and devastatingly relational political economies. And although our acts of witnessing are ongoing and incomplete, in gathering together for this kind of ghost-hunting, we found language for some ways for being in, around, through, and with software.

(% CARLINSAYS: this is actually seda and I am not yet happy with the transition here. This is Carlin. I agree. I think the beginning of the next paragraph is good and we need to do the work at the end of the above paragraph. I have given it a stab. Will take another look with Femke tomorrow.)

The guide builds on the concentration of expertise and intelligence that congregated at the Techno-Galactic Software Observatory worksession. There we developed state of the art methods that we now offer to you. To do this, we picked up the word "observation", turning it over and around. We brought it right up to our noses, clutching at our computers and keyboards, and held it outstretched to get a better look at the term's colonial and positivist legacy. Observation, and the enabling of it through intensive data-centric feedback mechanisms, is part of the cybernetic spells that underpin present day software production consumption complex. Holding the pain and the promise of our limitations, of our situated point of view, we sync our breath to the rhythm of our software and, with an agile sun salutation, begin to explore the possibilities of engagement with software's implications. 

This guide invites you to experiment with ways to stay with the trouble of software. In it you will find a set of practical and fantastical tools for the tactical (mis)use of software, empowering and enabling users to resist embedded paradigms and assumptions. It is a collection of methods for approaching software, experiencing its myths and realities, its risks and benefits. Drawing on theories of software and computation developed in academia and in the wild (%CARLINSAYS: i don't love making academia and the wild oppositional although i understand the impulse and it reads nicely as language. i think my reaction (beyond personal defensiveness which should be ignored) has to do with the rhetoric on the right in the US right now that frames people in college and in cities as living in bubbles while the "real" americans live more authentic lives elsewhere). that said the bureacracy at my school is enough to make me bow to this description. we had "and elsewhere before"), we grounded our methods in hands-on exercises and experiments that you now can try at home. These methods were developed in and inspired by the context of software production, hacker culture, software studies, computer science research, Free Software communities, privacy activism, and artistic practice. 

Reading is not enough, software is not just a text, observation is one potential beginning, engagement is tickling. Can you call up that feeling of the approach of a touch that cannot be born with a straight face? Come join us at the edge of the universe, on the metro platform, at your kitchen table, as we mark and measure critical distances from and entanglements with the seemingly endless software systems that surround us.


% LARGE: Techno-Galactic Software Survival Guide (% CARLINSAYS: use agreed title) was collectively produced as an outcome of the Techno-Galactic Software Observatory. 

% CARLINSAYS: This feels like it could be in a different font size or in brackets or is the start of the next page/spread?


A spectre is haunting the galaxy. It is neither revolutionary [@marx:1848:cmanifesto] nor just another global scale vulnerability [@meltdown:2018:spectre17], but no matter where you happen to be, there is the spectre of a software running somewhere in the background. Look! There it is, staring right back at you. Be it your phone screen or a passing satellite, software's observation and entanglement in the everyday appears complete. But is it so total? Let's look more closely. 

 We find ourselves in a universe built on a 1990s revival of a 1960s dream: software as a service (SaaS) [@haigh:2001:soft60]. In this online universe, the use of software has increasingly been knitted into the production of software, even while the rhetoric, rights, and procedures continue to suggest that software production and consumption constitute separate realms. This knitting together and its corresponding disavowal radically alters the operative role of software in society. The corresponding shifts ripple across galaxies, through social structures, working conditions, and trans-universal logistics, resulting in a profusion of apparatuses that aspire to be seamless while optimizing and monetizing individual and collective flows of information in line with the interests of a handful of actors. The diffusion of software services affects individuals and communities in the form of intensified identity shaping and self-management, and transforms the public by capturing institutions and common use infrastructures in short cut visions of start-ups or the inertia of tech giants. When then these services centralize data flows in ‘cloud services’ that collapse all societal spheres into the same processing logic, service oriented architectures also come to blur the last traces of the thin line separating bio- from necro-politics.[@hu:2015:prehistory]

As software spins its web around us, we reflexively try to take some distance only to realize that we are too well tangled in its gooey net. Caught upside down and dangling we ask: How can we interact, respond to, and think with software? What approaches can we use to recognize the agency of different actors, their ways of working, and their politics? What methods of observation are conducive to critical inquiry and affirmative discord? How can we resurface software, to find sites where its infrastructures are reconfiguring the everyday? How can we take stock of the ways software is always at work, especially where it is designed to disappear into the background? 

Bowled over by these questions, by constant pop-ups and push notifications, a fantasy takes shape of smashing our devices with a sledge hammer, throwing them in the river, retreating off grid and out of sight, and living software free lives. But this is a fantasy that cannot hold. It cannot hold us. Perhaps it is available to the tech-billionaires building and stocking bunkers, but for most of the people and the many non-humans inhabiting our galaxy, even for those that experience the irresistible lightness of a software tantrum that leads to a proximate smart device being catapulted into a temporary and fatal flight, it is not going to do it. We are in search of a better fantasy. One that lets us poke and push back on the specter that insists on surrounding us.

The Techno-Galactic Software Survival Guide (% CARLINSAYS: use agreed title) is an obsessive fantasy of optimization turned on its head, and stuck to the ceiling of a self-reflecting elevator. It is the ultimate book of dos and don'ts, of forgotten histories and un-inevitable futures, of mindful agile actions and improvisational service architectures, of any and all things that you can and cannot imagine needing in a techno-galaxy. We are techno-galactic in order to meet the contemporary paradigms of computation that proudly announce their capability for "scaling up to the universe." We stand here as modest witnesses to the scales of software communities and related political economies.

(% CARLINSAYS: this is actually seda and I am not yet happy with the transition here)

The guide builds on the concentration of expertise and intelligence that congregated at the Techno-Galactic Software Observatory worksession. There we developed state of the art methods that we now offer to you. To do this, we picked up the word "observation", turning it over and around. We brought it right up to our noses and held it outstretched to get a better look, aware of the terms’ colonial and positivist legacy while clutching to our computers and keyboards. Observation, and the enabling of it through intensive data-centric feedback mechanisms, is part of the cybernetic spells that underpin present day software production consumption complex. Painfully conscious of the limitations of our situated point of view, we sync our breath to the rhythm of our software and start with an agile sun salutation to explore the possibilities of engagement with software's implications. 

This guide invites you to experiment with ways to stay with the trouble of software. In it you will find a set of practical and fantastical tools for the tactical (mis)use of software, empowering and enabling users to resist embedded paradigms and assumptions. It is a collection of methods for approaching software, experiencing its myths and realities, its risks and benefits. Drawing on theories of software and computation developed in academia and in the wild, we grounded our methods in hands-on exercises and experiments that you now can try at home. These methods were developed in and inspired by the context of software production, hacker culture, software studies, computer science research, Free Software communities, privacy activism, and artistic practice. 

Reading is not enough, software is not just a text, observation is one potential beginning, engagement is tickling. Can you call up that feeling of the approach of a touch that cannot be born with a straight face? Come join us at the edge of the universe, on the metro platform, at your kitchen table, as we mark and measure critical distances from and entanglements with the seemingly endless software systems that surround us.


% LARGE: Techno-Galactic Software Survival Guide (% CARLINSAYS: use agreed title) was collectively produced as an outcome of the Techno-Galactic Software Observatory. 

% CARLINSAYS: This feels like it could be in a different font size or in brackets or is the start of the next page/spread?


A spectre is haunting the galaxy. It is neither revolutionary [@marx:1848:cmanifesto] nor is it a global scale vulnerability [@meltdown:2018:spectre17], but no matter where you happen to be, there is the spectre of a software running somewhere in the background. Look! There it is, looking right back at you. Be it your phone screen or a passing satellite, software's observation and entanglement in the everyday appears complete. But is it so total? Let's look more closely. 

 We find ourselves in a universe built on a 1990s revival of a 1960s dream: software as a service [@haigh:2001:soft60]. In this online universe, the use of software has increasingly been knitted into the production of software, even while the rhetoric, rights, and procedures around software continue to suggest that use and production constitute separate realms. This knitting together and its corresponding disavowal radically alters the operative role of software in society. The shifts ripple across galaxies, through social structures, working conditions, and personal relations, resulting in a profusion of apparatuses that aspire to be seamless while optimizing and monetizing individual and collective flows of information in line with the interests of a handful of actors. The diffusion of software services affects individuals and communities in the form of intensified identity shaping and self-management, and affects the public, as institutions and common use infrastructures increasingly rely on "solutions" provided by private companies for their management. As online services increasingly centralize data flows in the clouds, they blur the last traces of the thin line separating bio- from necro-politics.[@hu:2015:prehistory]

As software spins its web around us, we reflexively try to take some distance only to realize that we are too well tangled in its gooey net. Caught upside down and dangling we ask: How can we interact, respond to, and think with software? What approaches can we use to recognize the agency of different actors, their ways of working, and their politics? What methods of observation are conducive to critical inquiry and affirmative discord? How can we resurface software, to find sites where its infrastructures are reconfiguring the everyday? How can we take stock of the ways software is always at work, especially where it is designed to disappear into the background?

Bowled over by these questions, by constant pop-ups and push notifications, a fantasy takes shape of smashing our devices with a sledge hammer, throwing them in the river, retreating off grid and out of sight, and living software free lives. But this fantasy that cannot hold. It cannot hold us. Perhaps it is available to the tech-biilionaires building and stocking bunkers, but for most of the people on this planet, for the poorest, for the less and least powerful, for someone who is almost anyone having a sudden software tantrum, it is not going to do it. We are in search of a better fantasy. One that lets us poke and push back. 

The Techno-Galactic Guide to Software Observation (% CARLINSAYS: use agreed title) is an obsessive fantasy of optimization turned on its head, and stuck to the ceiling of a self-reflecting elevator. It is the ultimate book of dos and don'ts, of forgotten histories and un-inevitable futures, of mindful agile actions and improvisational service architectures, of any and all things that you can and cannot imagine needing in a techno-galaxy. We are techno-galactic in order to meet the contemporary paradigms of computation that proudly announce their capability for "scaling up to the universe." We stand here as modest witnesses to the scales of software communities and related political economies that involve and require observation.

At the Techno-Galactic Software Observatory worksession we developed state of the art methods that we now offer to you. To do this, we picked up the word "observation", turning it over and around. We brought it right up to our noses and held it outstretched to get a better look, holding all of the histories of people looking at others and objects in mind, holding computers and keyboards in hand. Observation, and the enabling of it through intensive data-centric feedback mechanisms, is part of the cybernetic spells that underpin present day software production. In this present moment, we sync our breath to the rhythm of our software and propose holistic observation as one way to enter an engagement with software's implications. 

This guide invites you to experiment with ways to stay with the trouble of software. In it you will find a set of practical and fantastical tools for the tactical (mis)use of software, empowering and enabling users to resist embedded paradigms and assumptions. It is a collection of methods for approaching software, experiencing its myths and realities, its risks and benefits. Drawing on theories of software and computation developed in academia and elsewhere, we grounded our methods in hands-on exercises and experiments that you now can try at home. These methods were developed in and inspired by the context of software production, hacker culture, software studies, computer science research, Free Software communities, privacy activism, and artistic practice. 

Reading is not enough, software is not just a text, observation is one potential beginning, engagement is tickling. Can you call up that feeling of the approach of a touch that cannot be born with a straight face? Come join us at the edge of the universe, on the metro platform, at your kitchen table, as we mark and measure critical distances from and entanglements with the seemingly endless software systems that surround us.


% LARGE: The techno-galactic software survival guide (% CARLINSAYS: use agreed title) was collectively produced as an outcome of the Techno-Galactic Software Observatory. 


% O L D E R  V E R S I O N S :

## The Techno-Galactic Software Observatory

In the summer of 2017, thirty or so people gathered in Brussels to explore practices of proximate critique with and of software in the context of a worksession entitled "Techno-Galactic Software Observatory".[^]{Worksessions are intensive transdisciplinary moments, organised twice a year by Constant. They aim to provide conditions for participants with different experiences and capabilities to temporarily link their practice and to  develop ideas, prototypes and  research projects together. For the worksessions, primarily Free, Libre and Open Source software is used and material that is available under Open Content Licenses.} The worksession called for software-curious people of all kinds to ask questions about software. The intuition behind such a call was that developing different types of engagement requires a heterogeneous group of participants with different levels of expertise,  skill and background. During three sessions that were two days each, participants collectively inspected the space-time of computation and probed the universe of hardware-software separations through excursions, exercises and conversations. They tried out various perspectives and methods to look at the larger picture of software as a concept, as a practice, and as a set of techniques.

The first two days of the Techno-Galactic Software Observatory included visits to the Musée de l'Informatique Pionnière en Belgique [^]{http://www.nam-ip.be} in Namur and the Computermuseum KU::Leuven[^]{http://etwie.be/database/actor/computermuseum-ku-leuven}. Surrounded by these collections of historical _numerical artefacts_, we started considering software in a long-term context (% CARLINSAYS: Do we mean a long historical context or longue duree or something else?). The museum visits provided an occasion to reflect on the conditions of software's appearance (% CARLINSAYS: appearances?) and to take on current-day questions from a genealogical perspective. What is software? How did it appear as a concept, in what industrial and governmental circumstances? What happens to the material conditions of its production (minerals, factory labor, hardware) when it evaporates into a cloud?

%!HYPHENATE: Musée de l'In-for-ma-tique Pi-o-nnière en Bel-gique

The second two days were spent focusing on the space-time dimension of IT development. The way computer programs and operating systems are manufactured has changed tremendously over the last seventy years, as has its production times and places. From military labs to the mega-corporation cubicles to the open-space freelancer utopia, what ruptures and continuities can be traced in the production, deployment, maintenance and destruction of software? From time-sharing to user-space partitions and containerization, what separations were and are at work? Where and when is software made today?

The last two days at the Techno-Galactic Software Observatory were dedicated to observation and its consequences. The development of software encompasses a series of practices whose evocative names are increasingly familiar: feedback, report, probe, audit, inspect, scan, diagnose, explore, test. What are the systems of knowledge and power within which these activities take place, and what other types of observation are possible? As a practical set for our investigations, we set up a walk-in clinic on the 25th floor of the World Trade Center, where users and developers could arrive with software-questions of all kinds.

## The Walk-in Clinic (% CARLINSAYS: I think this title should go below the description of the walk-in clinic as the last two days of the observatory worksession and should come instead right above the invitation to the clinic so I have moved it there)

> Do you suffer from the disappearance of your software into the cloud,
> feel oppressed by unequal user privilege, or experience the torment of
> software-ransom of any sort?
> Bring your devices and interfaces to the World Trade Center!
> With the help of a clear and in-depth session, at the Techno-Galactic
> Walk-In Clinic we guarantee immediate results.
> The  Walk-In Clinic provides free hands-on observations to software
> curious  people of all kinds. A wide range of professional and amateur 
> practitioners will provide you with Software-as-a-Critique-as-a-Service
> on the spot. Available services range from immediate interface critique, 
> collaborative code inspection, data dowsing, various forms of network
> analyses, unusability testing, identification of unknown viruses,
> risk assessment, opening of black-boxes and more.
> Free software observations provided.
> Last intake at 16:45.
> [^]{Invitation to the Walk-In Clinic, June 2017}

% On the following pages:
% Software as a Critique as a Service (SaaCaaS) Directory
% and intake forms for Software Curious People (SCP)

% PDF: http://observatory.constantvzw.org/documents/scprecord_FINAL.pdf 1x1 REF:scprecord
% INFO: Intake Forms for Software Curious People (SCP)

% PDF: http://observatory.constantvzw.org/documents/masterlist_twosides_NEU.pdf 2 1x1
% INFO: Software as a Critique as a Service (SaaCaaS) Directory
% PDF: http://observatory.constantvzw.org/documents/masterlist_twosides_NEU.pdf 1 1x1
% INFO: Software as a Critique as a Service (SaaCaaS) Directory

(% CARLINSAYS: I would suggest switching the order of these pages so the intake form is first and the list of services poster is second. It also seems important to make sure that the two page list of services poster for the clinic is printed on pages that are facing each other. If they are already set to do that then maybe nix my suggestion of moving the intake form up, but if they are not then that would be one way to shift the pages to make that happen.)


