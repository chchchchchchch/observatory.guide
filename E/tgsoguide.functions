# TODO:

#!% ABOUT
# % BOX
# % BY
# % CSSHERE
# % EXAMPLE
# % EXAMPLES
# % HEADER
#!% HOW
#!% INCLUDE
#!% METHOD
#!% NOTE
# % QUAVERBATIM
# % REMEMBER
# % SEEALSO
# % SEEUNDER
# % SHOW
# % SOURCE
# % URGENCY
# % WARNING
#!% WHAT
#!% WHEN
#!% WHO
#!% WHY

# % SEEHERE: replaces % INCLUDE:
# % SEEALSO: replaces % SEEUNDER:
# % RELATESTO: replaces % SEEALSO:

# --------------------------------------------------------------------------- #

function INCLUDE() {

  echo "O INCLUDE STARTS ==================================================="

  # SAVE FUNCTION ID (NOT AS VARIABLE, MAY BE OVERWRITTEN)
  # -------------------------------------------------------------- #
    FID=`date +%s%N`; echo $FID >> ${TMPID}.fid
  
  # ADD MARK TO $SRCDUMP
  # -------------------------------------------------------------- #
    echo -e "\n% $FID\n" >> $SRCDUMP
  
  # PROCESS INPUT !!!!!
  # -------------------------------------------------------------- #
    mdsh2src $*
  
  # REMOVE ADDED FUNCTIONS
  # -------------------------------------------------------------- #
    if [ -f ${TMPID}.fid ]; then
  
    # LOAD LATEST FUNCTION ID
      FID=`tail -n 1 ${TMPID}.fid`
    # REMOVE FROM FUNCTIONS
      sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
    # REMOVE FROM SAVED FUNCTIONS
      sed -i "/$FID/d" ${TMPID}.fid
    # RELOAD FUNCTIONS
      source $FUNCTIONS
  
    fi

  echo "O INCLUDE ENDS  ===================================================="

}

# --------------------------------------------------------------------------- #

function SEEHERE() {

  SRCBASE="$*";SRCPLUS="$SRCBASE/export/txt"
  REPLYPLUS=`curl -s -o /dev/null -IL -w "%{http_code}" $SRCPLUS`
  if [ $REPLYPLUS == '200' ]; then
       SRCGET="$SRCPLUS";else SRCGET="$SRCBASE" ; fi

  TMPIDX=`echo $* | md5sum | cut -c 1-8`
  getFile $SRCGET ${TMPID}.${TMPIDX}.mdsh

  if [ -f ${TMPID}.${TMPIDX}.mdsh ];then
  SEEID=`md5sum ${TMPID}.${TMPIDX}.mdsh | cut -c 1-8` #
  SEETITLE=`grep "^% METHOD:" ${TMPID}.${TMPIDX}.mdsh | #
            cut -d ":" -f 2-`
  if [ `echo $SEETITLE | wc -c` -lt 1 ];then
        SEETITLE="UNTITLED";
  fi
  echo "${SEEID}:$SEETITLE" >> ${TMPID}.toc

  if [ "$OUTPUTFORMAT" == pdf ];then 
         write2src "" 
  elif [ "$OUTPUTFORMAT" == html ];then 
         write2src "<span class=\"anchor\" id=\"$SEEID\"></span>" 
  fi

  INCLUDE $*

  fi

 #cp ${TMPID}.toc debug.toc

}



# --------------------------------------------------------------------------- #
  buildDescriptor() {

   if [ `echo $* | sed 's/ //g' | wc -c` -gt 1 ];then

       DOFORMAT=`echo "$*" | #
                 $PANDOCACTION | #
                 sed 's,</*p>,,g'`

      if [ "$OUTPUTFORMAT" == pdf ];then 
     
             write2src "\descriptor${THISCLASS}{$DOFORMAT}" 
     
      elif [ "$OUTPUTFORMAT" == html ];then 
     
             write2src "<span class=\"$THISCLASS descriptor\">" 
             write2src "<span>$THISDESCRIPTION</span> $DOFORMAT</span>" 
      fi

   else
            echo "NOTHING TO DO"
   fi

  }

# --------------------------------------------------------------------------- #

function METHOD() {

  THISCLASS="method";THISDESCRIPTION="Method:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHAT() {

  THISCLASS="what";THISDESCRIPTION="What: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHO() {

  THISCLASS="who";THISDESCRIPTION="Who: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHY() {

  THISCLASS="why";THISDESCRIPTION="Why: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHEN() {

  THISCLASS="when";THISDESCRIPTION="When: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function HOW() {

  THISCLASS="how";THISDESCRIPTION="How:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function ABOUT() {

  THISCLASS="about";THISDESCRIPTION="About:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function NOTE() {

  THISCLASS="note";THISDESCRIPTION="Note:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #







# --------------------------------------------------------------------------- #

function GROUPING() {

   GROUPINGID=`echo $* | tr [:upper:] [:lower:] | #
               sed 's/[^a-z]//g'`

   if [ ! -f ${TMPID}.grouping.pdf ];then
   getFile $INCLUDEPATH/tgsogroupings.svg ${TMPID}.grouping.svg
   if [ -f ${TMPID}.grouping.svg ];then
   svglayers2pdfpages ${TMPID}.grouping.svg ${TMPID}grouping.pdf
   fi
   fi

   PAGENUM=`grep $GROUPINGID ${TMPID}grouping.pageinfo | #
            head -n 1 | cut -d ":" -f 1 | sed 's/^0*//'`

   if [ `echo $PAGENUM | wc -c` -gt 1 ];then
         PDFCMD="\cleartoleft \
                 \pdfpage{${TMPID}grouping.pdf}{$PAGENUM}{}"
   else
         PDFCMD="\grouping{$*}"
        #echo "NO PAGENUM"
   fi

   if [ "$OUTPUTFORMAT" == pdf ];then 
  
          write2src "$PDFCMD" 
  
   elif [ "$OUTPUTFORMAT" == html ];then 
  
          HTMLCMD="<span class=\"grouping\">$*</span>"        
          write2src "$HTMLCMD" 
   fi

}

# --------------------------------------------------------------------------- #

  getVerbatim() {  

    THISCMD="$1"
    SEPARATOR="^${COMSTART}% [-]{4,} *${COMCLOSE}$"

   # GET LINENUMBER FOR SEPARATOR IN (PROCESSED) $SRCDUMP
   # ----
     LNHEAD=`grep -nE "$SEPARATOR" $SRCDUMP | # FIND SEPARATOR LINE
             tail -n 1 | cut -d ":" -f 1`     # SELECT LAST MATCH

   # EXTRACT TEXT PARTS PROCESSED BEFORE SEPARATOR
   # ----
     head -n $LNHEAD $SRCDUMP   | # DISPLAY UNTIL SEPARATOR LINE
     sed '$d' > ${TMPID}.before    # REMOVE LAST LINE (= SEPARATOR)
     cat ${TMPID}.before > $SRCDUMP # REWRITE $SRCDUMP

   # GET NUMBER FOR CMD LINE IN (UNPROCESSED) MDSH SRC
   # ----
     LNCMD=`grep -n "^% $THISCMD:" $MDSH | # FIND CMD LINE
             head -n 1 | cut -d ":" -f 1`   # SELECT LAST MATCH

   # DISABLE CMD LINE IN MDSH SRC (PREVENT DOUBLE MATCH)
   # ----
     sed -i "${LNCMD}s/^% $THISCMD:/%X${THISCMD}:/" $MDSH

   # EXTRACT PART UNTIL CMD LINE
   # ----
     head -n $LNCMD $MDSH > ${TMPID}.part

   # GREP MARKER IN TMP PART
   # ----
     LNPART=`tac ${TMPID}.part        | # START FROM END
             grep -nE "^% [-]{4,} *$"  | # FIND MARKER
             head -n 1 | cut -d ":" -f 1` # NUM FOR FIRST(=LAST) MATCH

   # EXTRACT UNPROCESSED SECTION
   # ----
     tac ${TMPID}.part           | # SHOW REVERT
     head -n $LNPART             | # UNTIL LINE NUMBER
     tac                         | # RE-REVERT 
     sed '$d' | sed '1d'         | # RM FIRST/LAST (= SEPARATOR/CMD)
     sed -n '/^.\{1\}/,$p' | tac | # FROM FIRST NON-EMPTY LINE TO END/REVERT
     sed -n '/^.\{1\}/,$p' | tac | # FROM FIRST NON-EMPTY LINE TO END/REVERT
     tee > ${TMPID}.xtract  # WRITE TO TMP FILE

     rm ${TMPID}.part # CLEAN UP

  }

# --------------------------------------------------------------------------- #

function BASHCODE() {

   getVerbatim "BASHCODE"

   if [ "$OUTPUTFORMAT" == pdf ];then

     #write2src "\lstsetBash"
      write2src '\begin{lstlisting}'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '\end{lstlisting}'

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src '<pre><code class="bash">'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</code></pre>'

   fi

   rm ${TMPID}.xtract # CLEAN UP

}

# --------------------------------------------------------------------------- #

function VERBATIM() {

   getVerbatim "VERBATIM"

   if [ "$OUTPUTFORMAT" == pdf ];then

      write2src '\begin{verbatim}'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '\end{verbatim}'

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src '<pre class="verbatim">'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</pre>'

   fi

   rm ${TMPID}.xtract # CLEAN UP

}

# --------------------------------------------------------------------------- #

