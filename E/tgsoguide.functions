# TODO:

#!% ABOUT
# % BOX
# % BY
# % CSSHERE
# % EXAMPLE
# % EXAMPLES
# % HEADER
#!% HOW
#!% INCLUDE
#!% METHOD
#!% NOTE
# % QUAVERBATIM
# % REMEMBER
# % SEEALSO
# % SEEUNDER
# % SHOW
# % SOURCE
# % URGENCY
# % WARNING
#!% WHAT
#!% WHEN
#!% WHO
#!% WHY

# % SEEHERE: replaces % INCLUDE:
# % SEEALSO: replaces % SEEUNDER:
# % RELATESTO: replaces % SEEALSO:

  PAGEW="314"
  PAGEH="436"

# --------------------------------------------------------------------------- #

function INCLUDE() {

  echo "O INCLUDE STARTS ==================================================="

  # SAVE FUNCTION ID (NOT AS VARIABLE, MAY BE OVERWRITTEN)
  # -------------------------------------------------------------- #
    FID=`date +%s%N`; echo $FID >> ${TMPID}.fid
  
  # ADD MARK TO $SRCDUMP
  # -------------------------------------------------------------- #
    echo -e "\n% $FID\n" >> $SRCDUMP
  
  # PROCESS INPUT !!!!!
  # -------------------------------------------------------------- #
    mdsh2src $*
  
  # REMOVE ADDED FUNCTIONS
  # -------------------------------------------------------------- #
    if [ -f ${TMPID}.fid ]; then
  
    # LOAD LATEST FUNCTION ID
      FID=`tail -n 1 ${TMPID}.fid`
    # REMOVE FROM FUNCTIONS
      sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
    # REMOVE FROM SAVED IDS
      sed -i "/$FID/d" ${TMPID}.fid
    # RELOAD FUNCTIONS
      source $FUNCTIONS
  
    fi

  echo "O INCLUDE ENDS  ===================================================="

}

# --------------------------------------------------------------------------- #

function SEEHERE() {

  SRCBASE=`echo $* | sed 's/ //g'`;SRCPLUS="$SRCBASE/export/txt"
  REPLYPLUS=`curl -s -o /dev/null -IL -w "%{http_code}" $SRCPLUS`
  if [ $REPLYPLUS == '200' ]; then
       SRCGET="$SRCPLUS";else SRCGET="$SRCBASE" ; fi

  SRCHREF=`echo $SRCBASE | sed 's/^[ ]*//'` # LINK TO SRC, EASIFY EDIT

  TMPIDX=`echo $* | md5sum | cut -c 1-8`
  getFile $SRCGET ${TMPID}.${TMPIDX}.mdsh

  if [ -f ${TMPID}.${TMPIDX}.mdsh ];then
  SEEID=`md5sum ${TMPID}.${TMPIDX}.mdsh | cut -d " " -f 1 | #
         base64 | tr  [:upper:] [:lower:] | cut -c 1-8`     #
  SEETITLE=`egrep "^% METHOD:|^% TOCTITLE:" ${TMPID}.${TMPIDX}.mdsh | #
            head -n 1 | cut -d ":" -f 2-`
  if [ `echo $SEETITLE | wc -c` -gt 2 ];then
        echo "${SEEID}:$SEETITLE" >> ${TMPID}.toc
  fi

  if [ "$OUTPUTFORMAT" == pdf ];then 
         write2src "" 
  elif [ "$OUTPUTFORMAT" == html ];then 
         write2src "<span class=\"anchor\" id=\"$SEEID\"></span>" 
  fi

  INCLUDE $SRCGET

  fi

}

## --------------------------------------------------------------------------- #
## MAKE MARGIN ICONS (ONCE)
## --------------------------------------------------------------------------- #
#  ICONSRC=`realpath "${INCLUDEPATH}/tgsoicons.svg" 2>/dev/null`
#  if [ -f "$ICONSRC" ];then
#  LAYERNAMES=`sed ':a;N;$!ba;s/\n//g' $ICONSRC  | # SVG WITHOUT LINEBREAKS
#              sed 's/>/&\n/g'                   | # ALL '>' ON NEWLINE
#              sed '/<g/s/scape:label/\nlabel/'  | # PUT NAME LABEL ON NL
#              grep -n ^label | cut -d " " -f 1  | # SELECT/EXTRACT LABELS
#              sort -t= -k 2 -u | sort           | # SORT/UNIQ + SORT NUM
#              grep -v "=\"XX_"                  | # IGNORE XX LAYERS
#              cut -d '"' -f 2`                    # EXTRACT NAMES
#  for L in $LAYERNAMES
#   do
#      TARGETNAME="${TMPID}"`echo $L | md5sum | cut -c 1-10`
#      if [ ! -f "${TARGETNAME}.svg" ];then
#      extractLayer $ICONSRC ${TARGETNAME}.svg $L
#      inkscape --export-text-to-path \
#               --export-pdf=${TARGETNAME}.pdf \
#               ${TARGETNAME}.svg
#      conformColor ${TARGETNAME}.pdf
#      echo "\newcommand{\icon${L}}{${TARGETNAME}.pdf}" >> ${TMPID}.preamble
#      fi
#  done
#  fi
## --------------------------------------------------------------------------- #




# --------------------------------------------------------------------------- #
# TODO: SHORT INTRODUCTION WHAT IS CALLED A DESCRIPTOR IN THIS CONTEXT
# ...
# ...
# ...
# --------------------------------------------------------------------------- #
  analyseDescriptor() {

    DNAME="$1" # DESCRIPTOR NAME PASSED AS ARGUMENT
    DCONTENT=`echo $* | sed "s/^[ ]*$DNAME//"`

  # ----
  # GET LN NUM FOR CMD (FIRST APPEARANCE) IN (RAW) MDSH SRC
    LNCMD=`grep -n "^% ${DNAME}" $MDSH | # FIND CMD LINE
           head -n 1 | cut -d ":" -f 1`  # SELECT FIRST MATCH
  # ----
  # DISABLE/TAG CMD LINE IN MDSH SRC (PREVENT MATCH NEXT TIME)
    T="$RANDOM"
    sed -i "${LNCMD}s/^% ${DNAME}:/%${T}${DNAME}:/" $MDSH

  # PREREQUISITE: DESCRIPTOR IS NOT EMPTY
  # ----
    if [ `echo $DCONTENT | #
          sed 's/ //g'   | #
          wc -c` -gt 1 ];then

       NEXT=`grep -A 60 "%${T}$DNAME" $MDSH  | # 60 LINES AFTER MATCH
             sed '1d' | sed '/^[ \t]*$/d'    | # NOT SELF, NOT EMPTY
             head -n 1 | grep "^%"` # FIRST NON-EMPTY, STARTS WITH %

       if [ `echo $DCONTENT | sed 's/[- ]*//g' | wc -c` -le 1 ];then

             DCONTENT=""

       if [ "$NEXT" == "" ];then
 
      # CASE 1: DESCRIPTOR IS FOLLOWED BY NON-DESCRIPTOR
      # ======
         DMODE="1"
       # COUNT WHAT FOLLOWS (CHARS)
         DNFO=`grep -A 60 "%${T}$DNAME" $MDSH | # 60 LINES AFTER MATCH
               sed '1d'                       | # NOT SELF
               sed -n '/^%/,$!p'              | # UNTIL FIRST DESCRIPTOR
               wc -c`                           # COUNT CHARACTERS
       else

      # CASE 0: DESCRIPTOR IS EMPTY AND NOT FOLLOWED BY NON-DESCRIPTOR
      # ======
         DMODE="0"
       fi
      else

      # DESCRIPTOR IS NOT DE-FACTO EMPTY
      # COUNT CONTENT (CHARS)
        DNFO=`echo $DCONTENT | wc -c` # COUNT CHARACTERS

       if [ "$NEXT" == "" ];then

      # CASE 2: DESCRIPTOR IS FOLLOWED BY NON-DESCRIPTOR
      # ======
        DMODE="2"

        else

      # CASE 3: DESCRIPTOR IS FOLLOWED BY DESCRIPTOR
      # ======
        DMODE="3"

       fi
      fi
    else
         DMODE="0"
         echo "DO NOTHING"
    fi

  }
# --------------------------------------------------------------------------- #
  buildDescriptor() {

   DNAME="$1"
   DCLASS=`echo $DNAME | tr [:upper:] [:lower:]`
   DCONTENT=`echo $*               | # DISPLAY
             sed "s/^[ ]*$DNAME//" | # REMOVE DNAME BLANKS
             $PANDOCACTION         | # TRANSLATE TO OUTPUT FORMAT
             sed 's,</*p>,,g'`       # RM <p> TAGS (HTML ONLY, DO ANYWAY)

   if   [ "$DMODE" == "1" ];then 
            PDFCMD="\descriptor${DCLASS}{$DMODE}{$DNFO}{}${APND}"
           HTMLCMD=""
   elif [ "$DMODE" != "0" ];then 
            PDFCMD="\descriptor${DCLASS}{$DMODE}{$DNFO}{$DCONTENT}"
           HTMLCMD=""
   else
           PDFCMD=""
          HTMLCMD=""
   fi 
  #echo "$PDFCMD"
   write2src "$PDFCMD"

  }
# --------------------------------------------------------------------------- #

function METHOD() {

# DESCRIPTIONCLASS="method"
# if [ "$OUTPUTFORMAT" == pdf ];then 
#  DESCRIPTIONNAME="Method:"
# elif [ "$OUTPUTFORMAT" == html ];then 
#  DESCRIPTIONNAME="<a href=\"$SRCHREF\">Method:</a>"
# fi 

  analyseDescriptor METHOD $*
    buildDescriptor METHOD $* 

}

# --------------------------------------------------------------------------- #

function EXAMPLE() {

  analyseDescriptor EXAMPLE $*
    buildDescriptor EXAMPLE $* 

}

# --------------------------------------------------------------------------- #

function HOW() {

  analyseDescriptor HOW $*
    buildDescriptor HOW $* 
}

# --------------------------------------------------------------------------- #

function WHAT() {
  analyseDescriptor WHAT $*
    buildDescriptor WHAT $* 
}

# --------------------------------------------------------------------------- #

function WHO() {
  analyseDescriptor WHO $*
    buildDescriptor WHO $* 
}

# --------------------------------------------------------------------------- #

function WHY() {
  analyseDescriptor WHY $*
    buildDescriptor WHY $* 
}

# --------------------------------------------------------------------------- #

function WHEN() {
  analyseDescriptor WHEN $*
    buildDescriptor WHEN $* 
}

# --------------------------------------------------------------------------- #

function ABOUT() {
  analyseDescriptor ABOUT $*
    buildDescriptor ABOUT $* 
}

# --------------------------------------------------------------------------- #

function NOTE() {
  analyseDescriptor NOTE $*
    buildDescriptor NOTE $* 
}

# --------------------------------------------------------------------------- #

function WARNING() {
  analyseDescriptor WARNING $*
    buildDescriptor WARNING $* 
}

# --------------------------------------------------------------------------- #

function REMEMBER() {
  analyseDescriptor REMEMBER $*
    buildDescriptor REMEMBER $* 
}

# --------------------------------------------------------------------------- #


function URGENCY() {
  analyseDescriptor URGENCY $*
    buildDescriptor URGENCY $* 
}

# --------------------------------------------------------------------------- #










# TODO: % TEXIN
#       % TEXFIX

# TODO:

function RELATESTO() {

   if [ "$OUTPUTFORMAT" == html ];then 
   write2src "<span class=\"tmp\">TODO: RELATES TO $*</span>"
   fi

}

function TODO() {

   if [ "$OUTPUTFORMAT" == html ];then 
   write2src "<span class=\"tmp\">TODO: $*</span>"
   fi

}














# --------------------------------------------------------------------------- #

function GROUPING() {

   GROUPINGID=`echo $* | tr [:upper:] [:lower:] | #
               sed 's/[^a-z]//g'`

   if [ ! -f ${TMPID}.grouping.pdf ];then
        getFile $INCLUDEPATH/tgsogroupings.svg ${TMPID}.grouping.svg
   if [ -f ${TMPID}.grouping.svg ];then
        svglayers2pdfpages ${TMPID}.grouping.svg ${TMPID}grouping.pdf
   fi
   fi

   PAGENUM=`grep $GROUPINGID ${TMPID}grouping.pageinfo | #
            head -n 1 | cut -d ":" -f 1 | sed 's/^0*//'`

   if [ `echo $PAGENUM | wc -c` -gt 1 ];then
         PDFCMD="\cleartoleft \
                 \pdfpage{${TMPID}grouping.pdf}{$PAGENUM}{}"
   else
         PDFCMD="\grouping{$*}"
        #echo "NO PAGENUM"
   fi

#       PDFCMD="\grouping{$*}"

   if [ "$OUTPUTFORMAT" == pdf ];then 
  
          write2src "$PDFCMD" 
  
   elif [ "$OUTPUTFORMAT" == html ];then 
  
          HTMLCMD="<span class=\"grouping\">$*</span>"        
          write2src "$HTMLCMD" 
   fi


}

# --------------------------------------------------------------------------- #

function SHOW() {

  # EXTRACT FILE ARGUMENT
  # ------------------------------------ #
    SHOWTHIS=`echo $* | sed 's/ /\n/g' | # DISPLAY ALL / ON SEP LINES
              grep "\.svg$" | head -n 1` # FIND .svg / TAKE FIRST

    if [ "$SHOWTHIS" != "" ];then

        # IF POSSIBLE KEEP THE FILE IN THE SAME LOCATION #
        # TO NOT BREAK IMAGE LINKS                       #
        # ---------------------------------------------- #
          TMPPATH=`realpath $INCLUDEPATH/$SHOWTHIS \
                   2> /dev/null | rev | cut -d "/" -f 2- | rev`
          if [ `echo $TMPPATH | wc -c` -le 1 ];then
          TMPPATH=`realpath $MAINPATH/$SHOWTHIS \
                   2> /dev/null | rev | cut -d "/" -f 2- | rev`
          fi
          if [ `echo $TMPPATH | wc -c` -gt 1 ]
          then  TMPPATH="${TMPPATH}/"
          else  TMPPATH="${TMPID}." ; fi
          TMPSVG="${TMPPATH}"`echo $SHOWTHIS | #
                              md5sum | cut -c 1-12`.svg
        # TRY TO GET THE FILE                            #
        # ---------------------------------------------- #
          getFile $INCLUDEPATH/$SHOWTHIS ${TMPSVG}

        # CHECK/EXTRACT CAPTION
        # ---------------------------------------------- #
        # GET LN NUM FOR CMD IN (UNPROCESSED) MDSH SRC
          LNCMD=`grep -n "^% SHOW:$*" $MDSH | # FIND CMD LINE
                 head -n 1 | cut -d ":" -f 1` # SELECT FIRST MATCH
        # ----
        # DISABLE/TAG CMD LINE IN MDSH SRC (PREVENT DOUBLE MATCH)
          T="$RANDOM"
          sed -i "${LNCMD}s/^% SHOW:$*/%${T}SHOW:$*/" $MDSH
        # ----
        # EXTRACT CAPTION FOR TAGGED '% SHOW'
          CAPTION=`grep -A 1 "%${T}SHOW:$*" $MDSH | #
                   grep "^% INFO:" | cut -d ":" -f 2- | #
                   $PANDOCACTION   | # DISPLAY/TRANSLATE
                   sed 's,</*p>,,g'` # REMOVE <P> TAGS

        # KEEP ON GOING (IF SUCCESSFUL)                  #
        # ---------------------------------------------- #
          if [ -f "$TMPSVG" ];then
     
          # EXTRACT AND CHECK LAYER FLAGS
            NTOCHECK=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
                      grep -v "$SHOWTHIS"      | # IGNORE $SHOWTHIS
                      sed 's/^/e:label="/'     | # ADD LABEL ATTRIBUTE
                      sed 's/$/"/'             | # CLOSE LABEL ATTRIBUTE
                      sed ':a;N;$!ba;s/\n/|/g'`  # COMBINE FOR EGREP
            LNAME=`egrep "$NTOCHECK" $TMPSVG     | # SEARCH IN SVG
                   head -n 1 | sed 's/="/\n="/g' | # EXTRACT FIRST MATCH
                   grep "^=" | cut -d "\"" -f 2`   # EXTRACT NAME
          # CHECK/EXTRACT REF
            REF=`echo $* | sed 's/ /\n/g'  | # DISPAY ON SEPARATE LINES
                 grep '^REF:' | head -n 1  | # MATCH PATTERN/TAKE FIRST
                 cut -d ":" -f 2-`           # CUT AFTER :
            if [ "$REF" != "" ];then         # IF REF IS SET
                  REF=`echo $REF | md5sum  | # MAKE HASH
                       cut -c 1-16`          # CUT HASH
            else  REF=`echo $RANDOM | md5sum | # MAKE HASH
                       cut -c 1-16`            # CUT HASH               
            fi 
          # EXTRACT PLACEMENT FLAGS
            PFLAG=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
                   egrep '^N$|^b$'          | # EXTRACT VALID FLAGS
                   head -n 1`                 # TAKE FIRST ONE

            if [ "$LNAME" != "" ];then

                extractLayer $TMPSVG $TMPSVG.$LNAME.svg $LNAME
                cropArea $TMPSVG.$LNAME.svg $TMPSVG.$LNAME.crop.svg
    
                PDFID=`echo $* | md5sum | cut -c 1-12`
                PDFHERE="${TMPID}${PDFID}.pdf"
                inkscape --export-pdf=$PDFHERE $TMPSVG.$LNAME.crop.svg
                conformColor $PDFHERE
    
              # cp ${TMPID}${PDFID}.pdf debug-${PDFID}.pdf
 
            # AND NOW LOOK CLOSER ...                                     #
            # ----------------------------------------------------------- #
              PDFSIZE=`pdfinfo $PDFHERE    | #
                       grep "Page size:"   | #
                       sed 's/[^0-9.x]*//g'` #
              PDFW=`echo $PDFSIZE | cut -d "x" -f 1 | #
                    cut -d "." -f 1`                  #
              PDFH=`echo $PDFSIZE | cut -d "x" -f 2 | #
                    cut -d "." -f 1`                  #
              THISIS="";PDFCMD="";PDFSHIFT="0";CNT="0" # RESET
   
            # ... AND CLOSER ...                                          #
            # ----------------------------------------------------------- #
   
             if   [ "$PDFW" -gt 500 ] &&
                  [ "$PDFH" -gt 600 ];     then THISIS="HUGE"
             elif [ "$PDFW" -ge "$PAGEW" ] &&
                  [ "$PDFH" -ge "$PAGEH" ];then THISIS="FULL"
             elif [ "$PDFW" -lt 100 ];     then THISIS="TINY"
             elif [ "$PDFW" -lt 200 ];     then THISIS="SMALL"
             elif [ "$PDFW" -lt 300 ];     then THISIS="BIG"

             fi
             if   [[ $THISIS != *FULL* ]];then
             if   [ "$PDFH" -eq "$PDFW" ];then THISIS="SQUARE $THISIS"
             elif [ "$PDFH" -gt "$PDFW" ];then THISIS="PORTRAIT $THISIS"
             elif [ "$PDFW" -gt "$PDFH" ];then THISIS="LANDSCAPE $THISIS"
             fi
             fi

            # ... AND DRAW THE CONSEQUENCES                               #
            # ----------------------------------------------------------- #
            # echo "$THISIS"; sleep 4
   
              if   [[ $THISIS == *FULL* ]];then
 
              RFC="{$REF}{$PFLAG}{$CAPTION}"
              while [ "$PDFSHIFT" -lt "$PDFW" ];
               do
                  IMGSHIFT="\imgshift{$PDFHERE}{$CNT}$RFC"
                  PDFCMD="$PDFCMD$IMGSHIFT"
                  CNT=`expr $CNT + 1`
                  PDFSHIFT=`expr $PAGEW \* $CNT`
                  RFC="{}{}{}"
              done
 
              elif [[ $THISIS == *HUGE* ]] && 
                   [[ $THISIS == *PORTRAIT* ]];then
                      echo "PUT ON A SINGLE PAGE (HUGE)"
                      PDFCMD="\imghuge{$PDFHERE}{$REF}{$PFLAG}{$CAPTION}"
              elif [[ $THISIS != *TINY* ]] && 
                   [[ $THISIS == *LANDSCAPE* ]];then
                      echo "STRETCH OVER TEXTWIDTH" 
                      if [ "$PFLAG" == "N" ];then
                           PDFCMD="\imgwide{$PDFHERE}{$CAPTION}{$REF}"
                      else PDFCMD="\imgwidefloat{$PDFHERE}{$CAPTION}{$REF}";fi
              elif [[ $THISIS == *TINY* ]] || 
                   [[ $THISIS == *SQUARE* ]];then
                      echo "MAKE A SMALL WRAPFIGURE"
                      PDFCMD="\imgsmall{$PDFHERE}{$CAPTION}{$REF}"
              else
                      echo "MAKE A DECENT WRAPFIGURE"  
                      PDFCMD="\imgsmall{$PDFHERE}{$CAPTION}{$REF}"
              fi
 
              if [ "$OUTPUTFORMAT" == pdf ];then 
 
                     write2src "$PDFCMD" 
 
              elif [ "$OUTPUTFORMAT" == html ];then 
             
                     write2src "<span class=\"$THISCLASS descriptor\">" 
                     write2src "<span>$THISDESCRIPTION</span>"
                     write2src "$DESCRIPTION</span>" 
              fi 

            fi
        # else
        #     # echo "$TMPSVG DOES NOT EXIST"
        #     # DO NOTHING
        #     # sleep 0
          fi
    else
          echo "NO INPUT PROVIDED"
    fi

 # FINALLY CLEANUP
 # ------------------------------------------------------------------------ #
   if [ -f "$TMPSVG" ];then rm "$TMPSVG"; fi
   if [ -f "$TMPSVG.$LNAME.svg" ];then rm "$TMPSVG.$LNAME.svg"; fi
   if [ -f "$TMPSVG.$LNAME.crop.svg" ];then rm "$TMPSVG.$LNAME.crop.svg"; fi

 # sleep 10

}

# --------------------------------------------------------------------------- #

function PDF() {

     PDFNOW=`echo $* | sed 's/ /\n/g' | # DISPAY ON SEPARATE LINES
             grep '\.pdf$' | head -n 1` # MATCH PATTERN/TAKE FIRST
     TMPPDF="${TMPID}"`echo $PDFNOW | md5sum | cut -c 1-12`.pdf

     if [ ! -f "$TMPPDF" ];then
          getFile $PDFNOW $TMPPDF
          if [ -f "$TMPPDF" ];then
               conformColor $TMPPDF
          fi
     fi

   # GET/SET PAGES/LAYOUT
   # ------------------------------------------------ #
     PAGES=`echo $* | sed 's/ /\n/g'     | # DISPAY ON SEPARATE LINES
            grep '^[0-9]\{1,\}-*[0-9]*$' | # MATCH PATTERN
            head -n 1`                     # TAKE FIRST
     if [ "$PAGES" == "" ];then PAGES="-"; fi # FALLBACK
 
    LAYOUT=`echo $* | sed 's/ /\n/g'         | # DISPAY ON SEPARATE LINES
            grep '^[0-9]\{1,\}x[0-9]\{1,\}$' | # MATCH PATTERN
            head -n 1`                         # TAKE FIRST
      if [ "$LAYOUT" == "" ];then LAYOUT="1x1"; fi # FALLBACK

   # CHECK/EXTRACT CAPTION
   # ------------------------------------------------ #
     CAPTION="" # RESET
     CAPTION=`grep -A 1 "% PDF:$*" $MDSH | #
              grep "^% INFO:" | cut -d ":" -f 2- | #
              $PANDOCACTION   | # DISPLAY/TRANSLATE
              sed 's,</*p>,,g'` # REMOVE <P> TAGS
   # DISABLE CAPTION
   # ------------------------------------------------ #
     LNCMD=`grep -n "^% PDF:$*" $MDSH | # FIND CMD LINE
            head -n 1 | cut -d ":" -f 1` # SELECT LAST MATCH
     sed -i "${LNCMD}s/^% PDF:/%X${THISCMD}:/" $MDSH

   # CHECK/EXTRACT REF
   # ------------------------------------------------ #
     REF=`echo $* | sed 's/ /\n/g'  | # DISPAY ON SEPARATE LINES
          grep '^REF:' | head -n 1  | # MATCH PATTERN/TAKE FIRST
          cut -d ":" -f 2-`           # CUT AFTER :
     if [ "$REF" != "" ];then         # IF REF IS SET
           REF=`echo $REF | md5sum  | # MAKE HASH
                cut -c 1-16`          # CUT HASH
     else  REF=`echo $PDFNOW | md5sum | # MAKE HASH
                cut -c 1-16`            # CUT HASH               
     fi 
   # EXTRACT PLACEMENT FLAGS. N = NOW -> PLACE ANCHOR
   # ------------------------------------------------ #
     PFLAG=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
            egrep '^N$|^b$'          | # EXTRACT VALID FLAGS
            head -n 1`                 # TAKE FIRST ONE

  if [ -f "$TMPPDF" ];then
  write2src "\pdfpagesplus{$TMPPDF}{$PAGES}{$LAYOUT}{$CAPTION}{$REF}{$PFLAG}{$MARGINICON}"
  fi

 }

# --------------------------------------------------------------------------- #

function SRCCODE() {

 # ------------------------------------------------------------------------ #
 # CHECK/SET LANGUAGE ARGUMENT
 # ------------------------------------------------------------------------ #
   ALL="$*";SRCLANG=`echo $1 | sed 's/ //g'`

 # SUPPORT HERITAGE
 # ----------------
   OVERWRITETHISCMD=`echo $* | #
                     sed 's/ /\n/g' | #
                     grep "^THISCMD:" | #
                     cut -d ":" -f 2`                     
   if [ "$OVERWRITETHISCMD" == "" ];then
         THISCMD="SRCCODE"
   else  THISCMD="$OVERWRITETHISCMD"
         ALL=`echo $* | sed "s/THISCMD:$OVERWRITETHISCMD//g"`;fi
 # ----------------

   if [ "$SRCLANG" != "" ];then
         ENVIRONMENT=`grep -i "newenvironment{$SRCLANG" ${TMPID}*.sty | #
                      grep -v "^%" | cut -d "{" -f 2 | cut -d "}" -f 1`
   fi
   if [ `echo $ALL | sed "s/^[ ]*$SRCLANG[ ]*//" | wc -c` -gt 1 ];then
      if [ "$ENVIRONMENT" != "" ];then
            echo $ALL | sed "s/^[ ]*$SRCLANG[ ]*//" > ${TMPID}.xtract
       else
            echo $ALL                               > ${TMPID}.xtract
      fi
    else
         getVerbatim "$THISCMD" ${TMPID}.xtract 
   fi
   if [ "$ENVIRONMENT" == "" ];then ENVIRONMENT="plain"; fi

 # ------------------------------------------------------------------------ #
 # LOOP THROUGH EXTRACT AND BRUTE FORCE getFile
 # ------------------------------------------------------------------------ #
 ( IFS=$'\n'
   for L in `cat ${TMPID}.xtract`
    do   if [ `echo $L | grep "^[ ]*%[ ]*F:" | wc -l` -gt 0 ];then

           TRY=`echo $L | cut -d ":" -f 2- | #
                sed 's/^[ ]*//' | cut -d " " -f 1`
           getFile $TRY tmp.tmp

           if [ "$SUCCESS" == "YES" ];then
                 LINES=`echo $L | sed "s/ /\n/g" | # SPACES TO NEWLINES 
                        sed "/[^0-9\\-]/d"       | # NUMBERS AND - ONLY
                        grep -v "^[ ]*$"         | # NO EMPTY LINES
                        egrep -v "^-|-$"         | # IGNORE ISOLATED - 
                        tail -n 1`                 # LAST LINE ONLY
                 if [ "$LINES" != "" ];then
                       LINES=`echo $LINES | sed 's/-/,/'`
                       SELECTLINES="sed -n \"${LINES}p\" "
                  else
                       SELECTLINES="tee"
                 fi
                 cat   tmp.tmp       | # START WITH ALL
                 eval "$SELECTLINES" | # DO SELECT LINE RANGE
                 tee                 >> ${TMPID}SRCCODE.tmp
           fi
         else
              echo $L                >> ${TMPID}SRCCODE.tmp
         fi
   done;)

   mv ${TMPID}SRCCODE.tmp ${TMPID}.xtract

 # ------------------------------------------------------------------------ #
 # FORMAT EXTRACT
 # ------------------------------------------------------------------------ #
   unIndent ${TMPID}.xtract
   sed -i 's/^[ \t]*$/°\\emptylinelst°/' ${TMPID}.xtract

 # ------------------------------------------------------------------------ #
   if [ "$OUTPUTFORMAT" == pdf ];then

      write2src "\begin{$ENVIRONMENT}"
       cat ${TMPID}.xtract >> $SRCDUMP
      write2src "\end{$ENVIRONMENT}"

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src "<pre><code class=\"${ENVIRONMENT}\">"
       cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</code></pre>'

   fi
 # ------------------------------------------------------------------------ #
   rm ${TMPID}.xtract # CLEAN UP

}

# --------------------------------------------------------------------------- #
# HERITAGE ??
# --------------------------------------------------------------------------- #

function BASHCODE() {

  SRCCODE bash THISCMD:BASHCODE

}

function VERBATIM() {

  SRCCODE plain THISCMD:VERBATIM

}

function VERBATIMWRAP() {

  SRCCODE quaverbatim THISCMD:VERBATIMWRAP

}
   
  # function QUAVERBATIM() {
  # 
  #   SRCCODE quaverbatim THISCMD:QUAVERBATIM
  # }

# --------------------------------------------------------------------------- #



# --------------------------------------------------------------------------- #

function TOC() {

 # ------------------------------------------------------------------------- #
   function mkTOC() {
    
       if [ "$OUTPUTFORMAT" == pdf ];then
    
             sleep 0
    
       elif [ "$OUTPUTFORMAT" == html ];then
    
          echo '<div class="toc">' > ${TMPID}.tocprocessed
        ( IFS=$'\n'
          for C in `cat ${TMPID}.toc`
           do CID=`echo $C | cut -d ":" -f 1`
              CTITLE=`echo $C            | #
                      cut -d ":" -f 2-   | #
                      eval $PANDOCACTION | # DISPLAY/TRANSLATE
                      sed 's,</*p>,,g'`    # REMOVE <P> TAGS
             echo "<a href=\"#$CID\">$CTITLE</a>" >> ${TMPID}.tocprocessed
          done; )
          echo '</div>'           >> ${TMPID}.tocprocessed

       fi  
           sed -i "s/$TOCMARKER/\n\n&\n\n/" $OUTPUT
           LNTOC=`grep -n "$TOCMARKER" $OUTPUT | #
                  head -n 1 | cut -d ":" -f 1`
           if [ `echo $LNTOC | wc -c` -gt 1 ];then 
                head -n $LNTOC $OUTPUT | sed '$d' >  ${OUTPUT}.tmp
                cat ${TMPID}.tocprocessed         >> ${OUTPUT}.tmp
                sed "1,${LNTOC}d" $OUTPUT         >> ${OUTPUT}.tmp 
                mv ${OUTPUT}.tmp $OUTPUT
                sed -i "s/$TOCMARKER//g" $OUTPUT
           fi
   }
 # ------------------------------------------------------------------------- #

 # ------------------------------------------------------------------------- #
 # DO IT AT THE END
 # ------------------------------------------------------------------------- #
   if [ "$OUTPUTFORMAT" == pdf ];then
         sleep 0
   elif [ "$OUTPUTFORMAT" == html ];then

      # PLACE A MARKER
      # --------------
        TOCMARKER=`echo TOCHERE | md5sum | cut -c 1-16`
        write2src "$TOCMARKER"

      # DO IT AT THE END
      # ----------------
        if [ `echo $postOutput | wc -c` -gt 1 ];then
              postOutput="$postOutput mkTOC"
        else
              postOutput="mkTOC"
        fi

   fi
 # ------------------------------------------------------------------------- #

 }

# --------------------------------------------------------------------------- #
function NEWPAGE() {

  if [ "$OUTPUTFORMAT" == pdf ];then

        write2src '\newpage'
  fi

}
# --------------------------------------------------------------------------- #




# ../lib/mdsh/href.functions
# --------------------------------------------------------------------------- #
# OVERWRITE
# --------------------------------------------------------------------------- #
  function refsrc() {

    if [ "$OUTPUTFORMAT" == "pdf" ];then

          mkqr $* > /dev/null 2>&1
          REFCODE="\qrmargin{$QRPDF}{$QRTXT}"
          echo "$REFCODE"
    
    elif [ "$OUTPUTFORMAT" == "html" ];then

          REFCODE="<span class=\"refsrc\">$*</span>"
          echo "$REFCODE"

    fi

  }
# --------------------------------------------------------------------------- #

function HREF() {

       O=`echo $* | cut -d " " -f 1`
       THISCMD="% HREF:"

   if [ "X$O" == "XON"  ] ||
      [ "X$O" == "XOFF" ]
    then
         HREFMODE="$O"
        #echo "HREFMODE: $HREFMODE"
    else
     if [ "X$HREFMODE" != "XOFF"  ]; then

         WWWLINK=`urlitzer "$*"`
         REFCODE=`refsrc $WWWLINK`
         write2src "$REFCODE"
     fi
   fi
}

# --------------------------------------------------------------------------- #

function FLUSHQRURLS(){

  write2src "\bigskip"
  write2src "URLS:"
  write2src ""

  for SHORTURL in `cat $QRURLLOG`
   do
     LONGURL=`curl -sIL $SHORTURL         | # CURL URL
              tr -d '\015'                | # CONFORM DOS END OF LINE
              grep ^Location              | # SELECT LOCATION
              cut -d ":" -f 2-            | # CUT SECOND FIELD
              tail -n 1                   | # SELECT LAST LINE
              sed 's,[ \t]*,,'            | # REMOVE ALL SPACES
              sed 's,/$,,'                | # REMOVE TRAILING SLASH
              sed "s,^${SHORTURLBASE}$,,"`  # DELETE SHORTURLBASE ONLY
     if [ `echo $LONGURL | wc -c` -ge 2 ]; then
           write2src "$SHORTURL -> $LONGURL"
      else
           write2src "$SHORTURL NOT SET!"
     fi
  done

}

# --------------------------------------------------------------------------- #
# --------------------------------------------------------------------------- #
# MODIFY $TMPTEX BEFORE COMPILING PDF
# --------------------------------------------------------------------------- #
  function modTeX() {
 
 # APPEND LINE CONTAIN *quote* IF AFTER ^\descriptor
 # ---- 
   sed -i "/^\\\descriptor*/{ N; s/\(\descriptor.*\)\n\(.*quote.*\)/\1\2/ }" \
          $SRCDUMP

 # INSERT \betweenqd BETWEEN \descriptor AND \begin{quote}
 # ----
   sed -i "s/\(\descriptor.*\)\(\\\begin{quote.*\)/\1\n\\\betweendq\n\2/" \
          $SRCDUMP

 # IF ON ONE LINE MOVE 2ND DESCRIPTOR TO NEW LINE  
 # ----
   sed -i '/^\\\descript/s/\\\descript/\n\n&/2' $SRCDUMP

 # WRAP PARAGRAPHS IN \begin{samepage} \end{samepage}
 # IF STARTING WITH \descriptor AND CONTAINING MORE MACROS (= \*)
 # ----
   sed -i '/./{H;d;};x;s/\n/={NL}=/g' $SRCDUMP
   sed -i '/^={NL}=\\\descrip.*\\/s/^.*$/\n\\\begin{samepage}&\n\\\end{samepage}/' \
           $SRCDUMP
   sed -i '1s/={NL}=//;s/={NL}=/\n/g' $SRCDUMP


  }

 # ------------------------------------------------------------------------- #
 # DO IT AT THE END
 # ------------------------------------------------------------------------- #
   if [ "$OUTPUTFORMAT" == pdf ];then

       # ADD ONLY ONCE
         if [ `echo $preOutput | grep modTeX | wc -l ` -lt 1 ];then
               preOutput="$preOutput modTeX"
         fi

   elif [ "$OUTPUTFORMAT" == html ];then

         sleep 0

   fi
 # ------------------------------------------------------------------------- #
# --------------------------------------------------------------------------- #

