
# --------------------------------------------------------------------------- #

function INCLUDE() {

  echo "O INCLUDE STARTS ==================================================="

  # SAVE FUNCTION ID (NOT AS VARIABLE, MAY BE OVERWRITTEN)
  # -------------------------------------------------------------- #
    FID=`date +%s%N`; echo $FID >> ${TMPID}.fid
  
  # ADD MARK TO $SRCDUMP
  # -------------------------------------------------------------- #
    echo -e "\n% $FID\n" >> $SRCDUMP
  
  # PROCESS INPUT !!!!!
  # -------------------------------------------------------------- #
    mdsh2src $*
  
  # REMOVE ADDED FUNCTIONS
  # -------------------------------------------------------------- #
    if [ -f ${TMPID}.fid ]; then
  
    # LOAD LATEST FUNCTION ID
      FID=`tail -n 1 ${TMPID}.fid`
    # REMOVE FROM FUNCTIONS
      sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
    # REMOVE FROM SAVED IDS
      sed -i "/$FID/d" ${TMPID}.fid
    # RELOAD FUNCTIONS
      source $FUNCTIONS
  
    fi

  echo "O INCLUDE ENDS  ===================================================="

}

# --------------------------------------------------------------------------- #

function GROUPING() {

   GROUPINGID=`echo $* | tr [:upper:] [:lower:] | #
               cut -d "-" -f 1 | sed 's/ //g' | #
               sed 's/[^a-z]//g'`

   if [ ! -f ${TMPID}.grouping.pdf ];then
        getFile $INCLUDEPATH/tgsogroupings.svg ${TMPID}.grouping.svg
   if [ -f ${TMPID}.grouping.svg ];then
        svglayers2pdfpages ${TMPID}.grouping.svg ${TMPID}grouping.pdf
   fi
   fi

   PAGENUM=`grep $GROUPINGID ${TMPID}grouping.pageinfo | #
            head -n 1 | cut -d ":" -f 1 | sed 's/^0*//'`


   GID=`echo ${GROUPINGID} | md5sum | cut -d " " -f 1 | #
        base64 | tr  [:upper:] [:lower:] | cut -c 1-8` #
   echo "${GID}:$*"   >> ${TMPID}.toc
   echo "${GID}:1:$*" >> ${TMPID}.index

   if [ `echo $PAGENUM | wc -c` -gt 1 ];then
         PDFCMD="\grouping{${TMPID}grouping.pdf}{$PAGENUM}{}{\label{$GID}}"
   else
         PDFCMD="\groupingfallback{$*\label{$GID}}"
   fi

   if [ "$OUTPUTFORMAT" == pdf ];then 
  
          write2src "$PDFCMD" 
  
   elif [ "$OUTPUTFORMAT" == html ];then 
  
          HTMLCMD="<span class=\"grouping\">$*</span>"        
          write2src "$HTMLCMD" 
   fi

}

# --------------------------------------------------------------------------- #

function SEEHERE() {

  SRCBASE=`echo $* | sed 's/ //g'`;SRCPLUS="$SRCBASE/export/txt"
  REPLYPLUS=`curl -s -o /dev/null -IL -w "%{http_code}" $SRCPLUS`
  if [ $REPLYPLUS == '200' ]; then
       SRCGET="$SRCPLUS";else SRCGET="$SRCBASE" ; fi
  SRCHREF=`echo $SRCBASE | sed 's/^[ ]*//'` # LINK TO SRC, EASIFY EDIT

  IDX=`echo "$*" | sed 's,http.\?://,,' | sed 's/ //g' | md5sum | cut -c 1-8`
  SEEID=`echo ${IDX} | md5sum | cut -d " " -f 1 | #
         base64 | tr  [:upper:] [:lower:] | cut -c 1-8` #

  getFile $SRCGET ${TMPID}.${IDX}.mdsh

  if [ -f "${TMPID}.${IDX}.mdsh" ];then

     SEETITLE=`egrep "^% METHOD:|^% TOCITEM:" ${TMPID}.${IDX}.mdsh | #
               head -n 1 | cut -d ":" -f 2-`
     if [ `echo $SEETITLE | wc -c` -gt 2 ];then
           echo "${SEEID}:$SEETITLE" >> ${TMPID}.toc
     else 
           echo "${SEEID}: Untitled" >> ${TMPID}.toc
     fi

     if [ "$OUTPUTFORMAT" == pdf ];then 
            ANCHOR="\label{$SEEID}" 
     elif [ "$OUTPUTFORMAT" == html ];then 
            ANCHOR="<span class=\"anchor\" id=\"$SEEID\"></span>" 
     fi

     echo "${SEEID}:2:$*" >> ${TMPID}.index
     INCLUDE $SRCGET 

  fi

}

# --------------------------------------------------------------------------- #

function ATTACHMENT() {

  SRCBASE=`echo $* | sed 's/ [A-Z]\b//g' | sed 's/ //g'`
  SRCPLUS="$SRCBASE/export/txt"


  REPLYPLUS=`curl -s -o /dev/null -IL -w "%{http_code}" $SRCPLUS`
  if [ $REPLYPLUS == '200' ]; then
       SRCGET="$SRCPLUS";else SRCGET="$SRCBASE" ; fi
  SRCHREF=`echo $SRCBASE | sed 's/^[ ]*//'` # LINK TO SRC, EASIFY EDIT

  IDT=`echo "$*" | sed 's,http.\?://,,' | sed 's/ //g' | md5sum | cut -c 1-8`
  ATTID=`echo ${IDT} | md5sum | cut -d " " -f 1 | #
         base64 | tr  [:upper:] [:lower:] | cut -c 1-8` #

  getFile $SRCGET ${TMPID}.${IDT}.mdsh

  if [ -f "${TMPID}.${IDT}.mdsh" ];then

     ATTTITLE=`egrep "^% TOCITEM:|^% HEADER:" ${TMPID}.${IDT}.mdsh | #
               head -n 1 | cut -d ":" -f 2-`
      ATTTYPE=`echo $ATTTITLE | sed 's/ /\n/g' | #
               grep T:[0-9]* | cut -d ":" -f 2`  # 
      if [ "$ATTTYPE" == "" ];then ATTTYPE=3 ;fi

     ATTTITLE=`echo $ATTTITLE | sed 's/ T:[0-9]\b//g'`
     if [ `echo $ATTTITLE | wc -c` -gt 2 ];then
           echo "${ATTID}:$ATTTITLE" >> ${TMPID}.toc
     else  echo "${ATTID}: Untitled" >> ${TMPID}.toc
     fi

     if [ "$OUTPUTFORMAT" == pdf ];then 
            ANCHOR="\label{$ATTID}" 
     elif [ "$OUTPUTFORMAT" == html ];then 
            ANCHOR="<span class=\"anchor\" id=\"$ATTID\"></span>" 
     fi

     echo "${ATTID}:${ATTTYPE}:$*" >> ${TMPID}.index

     if [ `echo $* | sed 's/ /\n/g' | #
           grep "^L$" | wc -l` -ge 1 ];then
           write2src "\cleartoleft"
     else
           write2src "\cleartoright"
     fi
           INCLUDE $SRCGET 
  fi

}

# --------------------------------------------------------------------------- #

function SEEALSO() {

  IDA=`echo "$*" | sed 's,http.\?://,,' | sed 's/ //g' | md5sum | cut -c 1-8`
  SEAID=`echo ${IDA} | md5sum | cut -d " " -f 1 | #
         base64 | tr  [:upper:] [:lower:] | cut -c 1-8` #
  echo "${SEAID}:2:$*" >> ${TMPID}.index
}

# --------------------------------------------------------------------------- #

function RELATESTO() {

  if [ `echo $* | sed 's/ //g' | wc -c` -gt 1 ];then

   IDR=`echo $* | sed 's,http.\?://,,' | sed 's/ //g' | md5sum | cut -c 1-8`
   RELID=`echo ${IDR} | md5sum | cut -d " " -f 1 | #
          base64 | tr  [:upper:] [:lower:] | cut -c 1-8` #

   if [ "$OUTPUTFORMAT" == pdf ];then 
          write2src "\descriptorrelates{$RELID}{CCCHAR}{TTTTITLE}" 
   elif [ "$OUTPUTFORMAT" == html ];then 
          sleep 0
   fi
  fi

}

# --------------------------------------------------------------------------- #

function TOCITEM() {

  # ANCHOR SET IN % SEEHERE
    write2src "$ANCHOR"

}

# --------------------------------------------------------------------------- #
  function insertRefs() {

    for REF in `grep -n "{[a-z0-9]\{8\}}{CCCHAR}{TTTTITLE}" $SRCDUMP`
     do
        REFLN=`echo $REF | cut -d ":" -f 1`
        REFID=`echo $REF | sed 's/\(.*\)\([a-z0-9]\{8\}\).*/\2/'`
        REFTITLE=`grep $REFID ${TMPID}.toc     | #
                  head -n 1 | cut -d ":" -f 2- | #
                  pandoc --no-wrap -r markdown -w plain | #
                  sed 's,</*p>,,g'      | # RM <p> TAGS (HTML ONLY, DO ANYWAY)
                  sed 's/\\\/\\\\\\\/g' | # THE GREAT ... 
                  sed 's/\//\\\\\//g'`    # ... ESCAPE
        REFCHARNUM=`echo $REFTITLE | wc -c`
        sed -i "${REFLN}s/TTTTITLE/$REFTITLE/" $SRCDUMP
        sed -i "${REFLN}s/CCCHAR/$REFCHARNUM/" $SRCDUMP
    done
  }
 # ------------------------------------------------------------------------- #
 # DO IT AT THE END
 # ------------------------------------------------------------------------- #
   if [ `echo $preOutput | grep insertRefs | wc -l ` -lt 1 ];then
 # ------------------------------------------------------------------------- #
     if [ "$OUTPUTFORMAT" == pdf ];then
        # DO IT AT THE END
        # ----------------
          if [ `echo $preOutput | wc -c` -gt 1 ];then
                preOutput="$preOutput insertRefs"
          else
                preOutput="insertRefs"
          fi
     elif [ "$OUTPUTFORMAT" == html ];then
          sleep 0
     fi
 # ------------------------------------------------------------------------- #
   fi
 # ------------------------------------------------------------------------- #

# --------------------------------------------------------------------------- #
# MAKE MARGIN ICONS (ONCE)
# --------------------------------------------------------------------------- #
  ICONSRC=`realpath "${INCLUDEPATH}/tgsoicons.svg" 2>/dev/null`
  if [ -f "$ICONSRC" ];then
  LAYERNAMES=`sed ':a;N;$!ba;s/\n//g' $ICONSRC  | # SVG WITHOUT LINEBREAKS
              sed 's/>/&\n/g'                   | # ALL '>' ON NEWLINE
              sed '/<g/s/scape:label/\nlabel/'  | # PUT NAME LABEL ON NL
              grep -n ^label | cut -d " " -f 1  | # SELECT/EXTRACT LABELS
              sort -t= -k 2 -u | sort           | # SORT/UNIQ + SORT NUM
              grep -v "=\"XX_"                  | # IGNORE XX LAYERS
              cut -d '"' -f 2`                    # EXTRACT NAMES
  for L in $LAYERNAMES
   do
      TARGETNAME="${TMPID}"`echo $L | md5sum | cut -c 1-10`
      if [ ! -f "${TARGETNAME}.svg" ];then
      extractLayer $ICONSRC ${TARGETNAME}.svg $L
      inkscape --export-text-to-path \
               --export-pdf=${TARGETNAME}.pdf \
               ${TARGETNAME}.svg
      conformColor ${TARGETNAME}.pdf
      echo "\newcommand{\icon${L}}{${TARGETNAME}.pdf}" >> ${TMPID}.preamble
      fi
  done
  fi

# --------------------------------------------------------------------------- #
# TODO: SHORT INTRODUCTION WHAT IS CALLED A DESCRIPTOR IN THIS CONTEXT
# ...
# ...
# ...
# --------------------------------------------------------------------------- #
  analyseDescriptor() {

    DNAME="$1" # DESCRIPTOR NAME PASSED AS ARGUMENT
    DCONTENT=`echo $* | sed "s/^[ ]*$DNAME//"`

  # ----
  # GET LN NUM FOR CMD (FIRST APPEARANCE) IN (RAW) MDSH SRC
    LNCMD=`grep -n "^% ${DNAME}" $MDSH | # FIND CMD LINE
           head -n 1 | cut -d ":" -f 1`  # SELECT FIRST MATCH
  # ----
  # DISABLE/TAG CMD LINE IN MDSH SRC (PREVENT MATCH NEXT TIME)
    T="$RANDOM"
    sed -i "${LNCMD}s/^% ${DNAME}:/%${T}${DNAME}:/" $MDSH

  # PREREQUISITE: DESCRIPTOR IS NOT EMPTY
  # ----
    if [ `echo $DCONTENT | #
          sed 's/ //g'   | #
          wc -c` -gt 1 ];then

       NEXT=`grep -A 60 "%${T}$DNAME" $MDSH  | # 60 LINES AFTER MATCH
             sed '1d' | sed '/^[ \t]*$/d'    | # NOT SELF, NOT EMPTY
             head -n 1 | grep "^%"` # FIRST NON-EMPTY, STARTS WITH %

       if [ `echo $DCONTENT | sed 's/[- ]*//g' | wc -c` -le 1 ];then

             DCONTENT=""

       if [ "$NEXT" == "" ];then
 
      # CASE 1: DESCRIPTOR IS FOLLOWED BY NON-DESCRIPTOR
      # ======
         DMODE="1"
       # COUNT WHAT FOLLOWS (CHARS)
         DNFO=`grep -A 60 "%${T}$DNAME" $MDSH | # 60 LINES AFTER MATCH
               sed '1d'                       | # NOT SELF
               sed -n '/^%/,$!p'              | # UNTIL FIRST DESCRIPTOR
               wc -c`                           # COUNT CHARACTERS
       else

      # CASE 0: DESCRIPTOR IS EMPTY AND NOT FOLLOWED BY NON-DESCRIPTOR
      # ======
         DMODE="0"
       fi
      else

      # DESCRIPTOR IS NOT DE-FACTO EMPTY
      # COUNT CONTENT (CHARS)
        DNFO=`echo $DCONTENT | wc -c` # COUNT CHARACTERS

       if [ "$NEXT" == "" ];then

      # CASE 2: DESCRIPTOR IS FOLLOWED BY NON-DESCRIPTOR
      # ======
        DMODE="2"

        else

      # CASE 3: DESCRIPTOR IS FOLLOWED BY DESCRIPTOR
      # ======
        DMODE="3"

       fi
      fi
    else
         DMODE="0"
         echo "DO NOTHING"
    fi

  }
# --------------------------------------------------------------------------- #
  buildDescriptor() {

   DNAME="$1"
   DCLASS=`echo $DNAME | tr [:upper:] [:lower:]`
   DCONTENT=`echo $*               | # DISPLAY
             sed "s/^[ ]*$DNAME//" | # REMOVE DNAME BLANKS
             $PANDOCACTION         | # TRANSLATE TO OUTPUT FORMAT
   sed 's/\((\\\%[ ]*CARLINSAYS:\)\([^)]*\))/\\\pdfcomment{\2}/' | #
             sed 's,</*p>,,g'`       # RM <p> TAGS (HTML ONLY, DO ANYWAY)

   if   [ "$DMODE" == "1" ];then 
            PDFCMD="\descriptor${DCLASS}{$DMODE}{$DNFO}{}${APND}"
           HTMLCMD=""
   elif [ "$DMODE" != "0" ];then 
            PDFCMD="\descriptor${DCLASS}{$DMODE}{$DNFO}{$DCONTENT}"
           HTMLCMD=""
   else
           PDFCMD=""
          HTMLCMD=""
   fi 

   write2src "$PDFCMD"

  }
# --------------------------------------------------------------------------- #

function METHOD() {

  analyseDescriptor METHOD $*
    buildDescriptor METHOD $* 
    echo "$ANCHOR"  >> $SRCDUMP
}

# --------------------------------------------------------------------------- #

function EXAMPLE() {

  analyseDescriptor EXAMPLE $*
    buildDescriptor EXAMPLE $* 

}

# --------------------------------------------------------------------------- #

function HOW() {

  analyseDescriptor HOW $*
    buildDescriptor HOW $* 
}

# --------------------------------------------------------------------------- #

function WHAT() {
  analyseDescriptor WHAT $*
    buildDescriptor WHAT $* 
}

# --------------------------------------------------------------------------- #

function WHO() {
  analyseDescriptor WHO $*
    buildDescriptor WHO $* 
}

# --------------------------------------------------------------------------- #

function WHY() {
  analyseDescriptor WHY $*
    buildDescriptor WHY $* 
}

# --------------------------------------------------------------------------- #

function WHEN() {
  analyseDescriptor WHEN $*
    buildDescriptor WHEN $* 
}

# --------------------------------------------------------------------------- #

function ABOUT() {
  analyseDescriptor ABOUT $*
    buildDescriptor ABOUT $* 
}

# --------------------------------------------------------------------------- #

function NOTE() {
  analyseDescriptor NOTE $*
    buildDescriptor NOTE $* 
}

# --------------------------------------------------------------------------- #

function WARNING() {
  analyseDescriptor WARNING $*
    buildDescriptor WARNING $* 
}

# --------------------------------------------------------------------------- #

function REMEMBER() {
  analyseDescriptor REMEMBER $*
    buildDescriptor REMEMBER $* 
}

# --------------------------------------------------------------------------- #

function URGENCY() {
  analyseDescriptor URGENCY $*
    buildDescriptor URGENCY $* 
}

# --------------------------------------------------------------------------- #

function SOURCE() {
  analyseDescriptor SOURCE $*
    buildDescriptor SOURCE $* 
}

# --------------------------------------------------------------------------- #

function BOX() {
  analyseDescriptor BOX $*
    buildDescriptor BOX $* 
}

# --------------------------------------------------------------------------- #
  PAGEW="314";PAGEH="436"

function SHOW() {

  # EXTRACT FILE ARGUMENT
  # ------------------------------------ #
    SHOWTHIS=`echo $* | sed 's/ /\n/g' | # DISPLAY ALL / ON SEP LINES
              grep "\.svg$" | head -n 1` # FIND .svg / TAKE FIRST

    if [ "$SHOWTHIS" != "" ];then

        # IF POSSIBLE KEEP THE FILE IN THE SAME LOCATION #
        # TO NOT BREAK IMAGE LINKS                       #
        # ---------------------------------------------- #
          TMPPATH=`realpath $INCLUDEPATH/$SHOWTHIS \
                   2> /dev/null | rev | cut -d "/" -f 2- | rev`
          if [ `echo $TMPPATH | wc -c` -le 1 ];then
          TMPPATH=`realpath $MAINPATH/$SHOWTHIS \
                   2> /dev/null | rev | cut -d "/" -f 2- | rev`
          fi
          if [ `echo $TMPPATH | wc -c` -gt 1 ]
          then  TMPPATH="${TMPPATH}/"
          else  TMPPATH="${TMPID}." ; fi
          TMPSVG="${TMPPATH}"`echo $SHOWTHIS | #
                              md5sum | cut -c 1-12`.svg
        # TRY TO GET THE FILE                            #
        # ---------------------------------------------- #
          getFile $INCLUDEPATH/$SHOWTHIS ${TMPSVG}

        # CHECK/EXTRACT CAPTION
        # ---------------------------------------------- #
        # GET LN NUM FOR CMD IN (UNPROCESSED) MDSH SRC
          LNCMD=`grep -n "^% SHOW: $*" $MDSH | # FIND CMD LINE
                 head -n 1 | cut -d ":" -f 1` # SELECT FIRST MATCH
        # ----
        # DISABLE/TAG CMD LINE IN MDSH SRC (PREVENT DOUBLE MATCH)
          T="$RANDOM"
         #sed -i "${LNCMD}s/^% SHOW:$*/%${T}SHOW:$*/" $MDSH
          sed -i "${LNCMD}s/^% SHOW:/%${T}SHOW:/" $MDSH
        # ----
        # EXTRACT CAPTION FOR TAGGED '% SHOW'
          CAPTION=`grep -A 1 "%${T}SHOW: $*" $MDSH | # FIND CMD + CONTEXT
                   grep "^% INFO:"                 | # GET INFO
                   head -n 1                       | # ONLY FIRST
                   cut -d ":" -f 2-                | # CUT INFO
                   $PANDOCACTION                   | # DISPLAY/TRANSLATE
                   sed 's,</*p>,,g'`                 # REMOVE <P> TAGS

        # KEEP ON GOING (IF SUCCESSFUL)                  #
        # ---------------------------------------------- #
          if [ -f "$TMPSVG" ];then

          # EXTRACT AND CHECK LAYER FLAGS
            NTOCHECK=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
                      grep -v "$SHOWTHIS"      | # IGNORE $SHOWTHIS
                      sed 's/^/e:label="/'     | # ADD LABEL ATTRIBUTE
                      sed 's/$/"/'             | # CLOSE LABEL ATTRIBUTE
                      sed ':a;N;$!ba;s/\n/|/g'`  # COMBINE FOR EGREP
            LNAME=`egrep "$NTOCHECK" $TMPSVG     | # SEARCH IN SVG
                   head -n 1 | sed 's/="/\n="/g' | # EXTRACT FIRST MATCH
                   grep "^=" | cut -d "\"" -f 2`   # EXTRACT NAME
          # CHECK/EXTRACT REF
            REF=`echo $* | sed 's/ /\n/g'  | # DISPAY ON SEPARATE LINES
                 grep '^REF:' | head -n 1  | # MATCH PATTERN/TAKE FIRST
                 cut -d ":" -f 2-`           # CUT AFTER :
            if [ "$REF" != "" ];then         # IF REF IS SET
                  REF=`echo $REF | md5sum  | # MAKE HASH
                       cut -c 1-16`          # CUT HASH
            else  REF=`echo $RANDOM | md5sum | # MAKE HASH
                       cut -c 1-16`            # CUT HASH               
            fi 
          # EXTRACT PLACEMENT FLAGS
            PFLAG=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
                   egrep '^N$|^b$'          | # EXTRACT VALID FLAGS
                   head -n 1`                 # TAKE FIRST ONE

            if [ "$LNAME" != "" ];then

                extractLayer $TMPSVG $TMPSVG.l.svg $LNAME Q
                cropArea $TMPSVG.l.svg $TMPSVG.$LNAME.crop.svg
    
                PDFID=`echo $* | md5sum | cut -c 1-12`
                PDFHERE="${TMPID}${PDFID}.pdf"
                inkscape --export-pdf=$PDFHERE $TMPSVG.$LNAME.crop.svg
                conformColor $PDFHERE
 
            # AND NOW LOOK CLOSER ...                                     #
            # ----------------------------------------------------------- #
              PDFSIZE=`pdfinfo $PDFHERE    | #
                       grep "Page size:"   | #
                       sed 's/[^0-9.x]*//g'` #
              PDFW=`echo $PDFSIZE | cut -d "x" -f 1 | #
                    cut -d "." -f 1`                  #
              PDFH=`echo $PDFSIZE | cut -d "x" -f 2 | #
                    cut -d "." -f 1`                  #
              THISIS="";PDFCMD="";PDFSHIFT="0";CNT="0" # RESET
 
            # CREATE TEX MACRO                                            #
            # ----------------------------------------------------------- #
              RFC="{$REF}{$PFLAG}{$CAPTION}"
              while [ "$PDFSHIFT" -lt "$PDFW" ];
               do
                  IMGSHIFT="\imgshift{$PDFHERE}{$CNT}$RFC"
                  PDFCMD="$PDFCMD$IMGSHIFT"
                  CNT=`expr $CNT + 1`
                  PDFSHIFT=`expr $PAGEW \* $CNT`
                  RFC="{}{}{}"
              done

            # WRITE TO SRC                                                #
            # ----------------------------------------------------------- #
              if [ "$OUTPUTFORMAT" == pdf ];then 
 
                     write2src "$PDFCMD" 
 
              elif [ "$OUTPUTFORMAT" == html ];then 
             
                     write2src "<span class=\"$THISCLASS descriptor\">" 
                     write2src "<span>$THISDESCRIPTION</span>"
                     write2src "$DESCRIPTION</span>" 
              fi 
            fi
          fi
    else
          echo "NO INPUT PROVIDED (SOMETHING WENT WRONG?)"
    fi

 # FINALLY CLEANUP
 # ------------------------------------------------------------------------ #
   if [ -f "$TMPSVG" ];then rm "$TMPSVG"; fi
   if [ -f "$TMPSVG.l.svg" ];then rm "$TMPSVG.l.svg"; fi
   if [ -f "$TMPSVG.$LNAME.crop.svg" ];then rm "$TMPSVG.$LNAME.crop.svg"; fi

}

# --------------------------------------------------------------------------- #

function PDF() {

     THISCMD="PDF"
     PDFNOW=`echo $* | sed 's/ /\n/g' | # DISPAY ON SEPARATE LINES
             grep '\.pdf$' | head -n 1` # MATCH PATTERN/TAKE FIRST
     TMPPDF="${TMPID}"`echo $PDFNOW | md5sum | cut -c 1-12`.pdf

     if [ ! -f "$TMPPDF" ];then
          getFile $PDFNOW $TMPPDF
          if [ -f "$TMPPDF" ];then
               conformColor $TMPPDF
          fi
     fi

   # GET/SET PAGES/LAYOUT
   # ------------------------------------------------ #
     PAGES=`echo $* | sed 's/ /\n/g'     | # DISPAY ON SEPARATE LINES
            grep '^[0-9]\{1,\}-*[0-9]*$' | # MATCH PATTERN
            head -n 1`                     # TAKE FIRST
     if [ "$PAGES" == "" ];then PAGES="-"; fi # FALLBACK
 
    LAYOUT=`echo $* | sed 's/ /\n/g'         | # DISPAY ON SEPARATE LINES
            grep '^[0-9]\{1,\}x[0-9]\{1,\}$' | # MATCH PATTERN
            head -n 1`                         # TAKE FIRST
      if [ "$LAYOUT" == "" ];then LAYOUT="1x1"; fi # FALLBACK

   # CHECK/EXTRACT CAPTION
   # ------------------------------------------------ #
     CAPTION="" # RESET
     CAPTION=`grep -A 1 "% PDF: $*" $MDSH | # FIND CMD + CONTEXT
              grep "^% INFO:"             | # GET INFO
              head -n 1                   | # ONLY FIRST
              cut -d ":" -f 2-            | # CUT INFO
              $PANDOCACTION               | # DISPLAY/TRANSLATE
              sed 's,</*p>,,g'`             # REMOVE <P> TAGS
   # DISABLE CAPTION
   # ------------------------------------------------ #
     LNCMD=`grep -n "^% PDF: $*" $MDSH | # FIND CMD LINE
            head -n 1 | cut -d ":" -f 1` # SELECT LAST MATCH
     sed -i "${LNCMD}s/^% PDF:/%X${THISCMD}:/" $MDSH

   # CHECK/EXTRACT REF
   # ------------------------------------------------ #
     REF=`echo $* | sed 's/ /\n/g'  | # DISPAY ON SEPARATE LINES
          grep '^REF:' | head -n 1  | # MATCH PATTERN/TAKE FIRST
          cut -d ":" -f 2-`           # CUT AFTER :
     if [ "$REF" != "" ];then         # IF REF IS SET
           REF=`echo $REF | md5sum  | # MAKE HASH
                cut -c 1-16`          # CUT HASH
     else  REF=`echo $PDFNOW | md5sum | # MAKE HASH
                cut -c 1-16`            # CUT HASH               
     fi 
   # EXTRACT PLACEMENT FLAGS. N = NOW -> PLACE ANCHOR
   # ------------------------------------------------ #
     PFLAG=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
            egrep '^N$|^b$'          | # EXTRACT VALID FLAGS
            head -n 1`                 # TAKE FIRST ONE

  if [ -f "$TMPPDF" ];then
  write2src "\pdfpagesplus{$TMPPDF}{$PAGES}{$LAYOUT}{$CAPTION}{$REF}{$PFLAG}{$MARGINICON}"
  fi

 }

# --------------------------------------------------------------------------- #
# TODO: ALLOW TeX CODE WITHIN QUAVERBATIM

function SRCCODE() {

 # ------------------------------------------------------------------------ #
 # CHECK/SET LANGUAGE ARGUMENT
 # ------------------------------------------------------------------------ #
   ALL="$*";THISCMD="SRCCODE";
   ENVIRONMENT="" # RESET
   SRCLANG=`echo $1 | sed 's/ //g' | sed 's/[^a-z]//g'`

   if [ "$SRCLANG" != "" ];then
         ENVIRONMENT=`grep -ih "newenvironment{$SRCLANG" ${TMPID}*.sty | #
                      grep -v "^%" | head -n 1 | #
                      cut -d "{" -f 2 | cut -d "}" -f 1`
   fi
   if [ `echo $ALL | sed "s/^[ ]*$SRCLANG[ ]*//" | wc -c` -gt 1 ];then
      if [ "$ENVIRONMENT" != "" ];then
            echo $ALL | sed "s/^[ ]*$SRCLANG[ ]*//" > ${TMPID}.xtract
       else
            echo $ALL                               > ${TMPID}.xtract
      fi
         # GET NUMBER FOR CMD LINE IN (UNPROCESSED) MDSH SRC AND
         # DISABLE CMD LINE IN MDSH SRC (PREVENT DOUBLE MATCH)
         # ----
           LNCMD=`grep -n "^% $THISCMD:" $MDSH | # FIND CMD LINE
                  head -n 1 | cut -d ":" -f 1`   # SELECT LAST MATCH
           sed -i "${LNCMD}s/^% $THISCMD:/%X${THISCMD}:/" $MDSH 
    else
         getVerbatim "$THISCMD" ${TMPID}.xtract 
   fi
   if [ "$ENVIRONMENT" == "" ];then ENVIRONMENT="plain"; fi

 # ------------------------------------------------------------------------ #
 # LOOP THROUGH EXTRACT AND BRUTE FORCE getFile
 # ------------------------------------------------------------------------ #
 ( IFS=$'\n'
   for L in `grep -n "" ${TMPID}.xtract`
    do L=`echo $L | cut -d ":" -f 2-` # cat SKIPPED EMPTY LINES?
       if [ `echo $L | grep "^[ ]*%[ ]*F:" | wc -l` -gt 0 ];then

         TRY=`echo $L | cut -d ":" -f 2- | #
              sed 's/^[ ]*//' | cut -d " " -f 1`
         getFile $TRY tmp.tmp

         if [ "$SUCCESS" == "YES" ];then
               LINES=`echo $L | sed "s/ /\n/g" | # SPACES TO NEWLINES 
                      sed "/[^0-9\\-]/d"       | # NUMBERS AND - ONLY
                      grep -v "^[ ]*$"         | # NO EMPTY LINES
                      egrep -v "^-|-$"         | # IGNORE ISOLATED - 
                      tail -n 1`                 # LAST LINE ONLY
               if [ "$LINES" != "" ];then
                     LINES=`echo $LINES | sed 's/-/,/'`
                     SELECTLINES="sed -n \"${LINES}p\" "
                else
                     SELECTLINES="tee"
               fi
               cat   tmp.tmp       | # START WITH ALL
               eval "$SELECTLINES" | # DO SELECT LINE RANGE
               tee                 >> ${TMPID}SRCCODE.tmp
               rm tmp.tmp
         fi
       else
            echo "$L"               >> ${TMPID}SRCCODE.tmp
       fi
   done;)

   mv ${TMPID}SRCCODE.tmp ${TMPID}.xtract

 # ------------------------------------------------------------------------ #
 # FORMAT EXTRACT
 # ------------------------------------------------------------------------ #
   unIndent ${TMPID}.xtract
   sed -i 's/^[ \t]*$/°\\emptylinelst°/' ${TMPID}.xtract
   LN=`wc -l ${TMPID}.xtract | cut -d " " -f 1`
 # ------------------------------------------------------------------------ #
   VERBATIM=${TMPID}.`md5sum ${TMPID}.xtract | cut -c 1-8`.verbatim
   mv ${TMPID}.xtract $VERBATIM

   if [ "$OUTPUTFORMAT" == pdf ];then

     #write2src "\begin{$ENVIRONMENT}{$LN}"
     # cat ${TMPID}.xtract >> $SRCDUMP
     #write2src "\end{$ENVIRONMENT}"
      write2src "\lstinput${ENVIRONMENT}{$VERBATIM}"

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src "<pre><code class=\"${ENVIRONMENT}\">"
       cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</code></pre>'

   fi
 # ------------------------------------------------------------------------ #
 # rm ${TMPID}.xtract # CLEAN UP

}


# --------------------------------------------------------------------------- #

function TOC() {

 # ------------------------------------------------------------------------- #
   function mkTOC() {
    
     if [ "$OUTPUTFORMAT" == pdf ];then
  
       echo "\begin{tocpage}"  >  ${TMPID}.tocprocessed

    ( IFS=$'\n'
      for TOCITEM in `cat ${TMPID}.index | #
                      cut -d ":" -f 1-2  | #
                      uniq`
       do
          CID=`echo $TOCITEM | cut -d ":" -f 1`
          CLEVEL=`echo $TOCITEM | cut -d ":" -f 2`
          CTITLE=`grep "^$CID" ${TMPID}.toc | # 
                  head -n 1 | cut -d ":" -f 2- | #
                  pandoc --no-wrap -r markdown -w plain`
          echo "\tocitem{$CLEVEL}{$CTITLE}{$CID}" >> ${TMPID}.tocprocessed

      done; )

       echo "\end{tocpage}"    >> ${TMPID}.tocprocessed
 
 # elif [ "$OUTPUTFORMAT" == html ];then
 #          echo '<div class="toc">' > ${TMPID}.tocprocessed
 #  ( IFS=$'\n'
 #    for C in `cat ${TMPID}.toc`
 #     do CID=`echo $C | cut -d ":" -f 1`
 #        CTITLE=`echo $C            | #
 #                cut -d ":" -f 2-   | #
 #                eval $PANDOCACTION | # DISPLAY/TRANSLATE
 #                sed 's,</*p>,,g'`    # REMOVE <P> TAGS
 #       echo "<a href=\"#$CID\">$CTITLE</a>" >> ${TMPID}.tocprocessed
 #    done; )
 #    echo '</div>'           >> ${TMPID}.tocprocessed

     fi  

     sed -i "s/$TOCMARKER/\n\n&\n\n/" $INSERTTOCHERE
     LNTOC=`grep -n "$TOCMARKER" $INSERTTOCHERE | #
            head -n 1 | cut -d ":" -f 1`
     if [ `echo $LNTOC | wc -c` -gt 1 ];then 
          head -n $LNTOC $INSERTTOCHERE | sed '$d' >  $INSERTTOCHERE.tmp
          cat ${TMPID}.tocprocessed                >> $INSERTTOCHERE.tmp
          sed "1,${LNTOC}d" $INSERTTOCHERE         >> $INSERTTOCHERE.tmp 
          mv $INSERTTOCHERE.tmp $INSERTTOCHERE
          sed -i "s/$TOCMARKER//g" $INSERTTOCHERE
     fi

   }
 # ------------------------------------------------------------------------- #

 # ------------------------------------------------------------------------- #
 # WHERE TO PUT THE TOC
 # ------------------------------------------------------------------------- #
   # PLACE A MARKER
   # --------------
     TOCMARKER=`echo TOCHERE | md5sum | cut -c 1-16`

   if [ "$OUTPUTFORMAT" == pdf ];then

        write2src "$TOCMARKER"
        INSERTTOCHERE="$SRCDUMP"

      # DO IT AT THE END
      # ----------------
        if [ `echo $postOutput | wc -c` -gt 1 ];then
              preOutput="$preOutput mkTOC"
        else
              preOutput="mkTOC"
        fi

   elif [ "$OUTPUTFORMAT" == html ];then

        write2src "$TOCMARKER"
        INSERTTOCHERE="$OUTPUT"

      # DO IT AT THE END
      # ----------------
        if [ `echo $postOutput | wc -c` -gt 1 ];then
              postOutput="$postOutput mkTOC"
        else
              postOutput="mkTOC"
        fi
   fi
 # ------------------------------------------------------------------------- #

 }

# --------------------------------------------------------------------------- #
function NEWPAGE() {

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src '\newpage'
  fi

}
# --------------------------------------------------------------------------- #
function EMPTYPAGE() {

  if [ "$OUTPUTFORMAT" == pdf ];then
       write2src '\emptypage'
  fi

}
# --------------------------------------------------------------------------- #
function CLEARTOLEFT() {

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src '\cleartoleft'
  fi

}
# --------------------------------------------------------------------------- #
function CLEARTORIGHT() {

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src '\cleartoright'
  fi

}
# --------------------------------------------------------------------------- #
function HEADER() {

  if [ "$OUTPUTFORMAT" == pdf ];then

   HCONTENT=`echo $*               | # DISPLAY
             sed "s/^[ ]*$DNAME//" | # REMOVE DNAME BLANKS
             $PANDOCACTION         | # TRANSLATE TO OUTPUT FORMAT
   sed 's/\((\\\%[ ]*CARLINSAYS:\)\([^)]*\))/\\\pdfcomment{\2}/' | #
             sed 's,</*p>,,g'`       # RM <p> TAGS (HTML ONLY, DO ANYWAY)
        write2src "\section{$HCONTENT}"
        write2src "$ANCHOR"
  fi

}
# --------------------------------------------------------------------------- #
function QUOTESTYLE() {

  LNBEGIN=`grep -n "" $SRCDUMP        | # NUMBER ALL LINES
           tail -n 80                 | # LOOK NOT TO FAR
           grep 'begin{quote}'        | # FIND MATCH
           tail -n 1 | cut -d ":" -f 1` # TAKE LAST/EXTRACT
    LNEND=`grep -n "" $SRCDUMP        | # NUMBER ALL LINES
           tail -n 80                 | # LOOK NOT TOO FAR
           grep 'end{quote}'          | # FIND MATCH
           tail -n 1 | cut -d ":" -f 1` # TAKE LAST/EXTRACT
  STYLE=`echo $* | cut -d " " -f 1 | sed 's/[^a-z]*//g'`
    ENVIRONENT="" # RESET
   ENVIRONMENT=`grep -ih "newenvironment{$STYLE" ${TMPID}*.sty | #
                grep -v "^%" | head -n 1 | #
                cut -d "{" -f 2 | cut -d "}" -f 1`
  if [ "$ENVIRONMENT" != "" ] && 
     [ "$LNBEGIN"     != "" ] &&
     [ "$LNEND"       != "" ];then
       sed -i "${LNBEGIN}s/begin{quote}/begin{$ENVIRONMENT}/" $SRCDUMP
       sed -i "${LNEND}s/end{quote}/end{$ENVIRONMENT}/" $SRCDUMP
  fi
}
# --------------------------------------------------------------------------- #
# % TEXFIX

function TEXIN() {

   if [ "$OUTPUTFORMAT" == pdf ];then 
   write2src "$*"
   fi

}

function TODO() {

   if [ "$OUTPUTFORMAT" == html ];then 
   write2src "<span class=\"tmp\">TODO: $*</span>"
   fi

}
# --------------------------------------------------------------------------- #


# --------------------------------------------------------------------------- #
# MODIFY $TMPTEX BEFORE COMPILING PDF
# --------------------------------------------------------------------------- #
  function modTeX() {
 
 # APPEND LINE CONTAIN *quote* IF AFTER ^\descriptor
 # ---- 
   sed -i "/^\\\descriptor*/{ N; s/\(\descriptor.*\)\n\(.*quote.*\)/\1\2/ }" \
          $SRCDUMP
 # INSERT \betweenqd BETWEEN \descriptor AND \begin{quote}
 # ----
   sed -i "s/\(\descriptor.*\)\(\\\begin{quote.*\)/\1\n\\\betweendq\n\2/" \
          $SRCDUMP
 # APPEND LINE CONTAIN *enumerate* IF AFTER ^\descriptor
 # ---- 
   sed -i "/^\\\descriptor*/{ N; s/\(\descriptor.*\)\n\(.*enumerate.*\)/\1\2/ }" \
          $SRCDUMP
 # INSERT \betweenqd BETWEEN \descriptor AND \begin{quote}
 # ----
   sed -i "s/\(\descriptor.*\)\(\\\begin{enumerate.*\)/\1\n\\\betweendq\n\2/" \
          $SRCDUMP

 # IF ON ONE LINE MOVE 2ND DESCRIPTOR TO NEW LINE  
 # ----
   sed -i '/^\\\descript/s/\\\descript/\n\n&/2' $SRCDUMP

 # WRAP PARAGRAPHS IN \begin{samepage} \end{samepage}
 # IF STARTING WITH \descriptor AND CONTAINING MORE MACROS (= \*)
 # ----
   sed -i '/./{H;d;};x;s/\n/={NL}=/g' $SRCDUMP
   sed -i '/^={NL}=\\\descrip.*\\/s/^.*$/\n\\\begin{samepage}&\n\\\end{samepage}/' \
           $SRCDUMP
   sed -i '1s/={NL}=//;s/={NL}=/\n/g' $SRCDUMP

 # CHANGE STANDARD ENVIRONMENT CREATED BY PANDOC 
   sed -i 's/\\begin{lstlisting}/\\begin{plain}{10}/' $SRCDUMP
   sed -i 's/{lstlisting}/{plain}/'                   $SRCDUMP

 # WRAP URLS IN COMMAND
 # sed -i '/^[\%]/!s,\bhttp.\?://[^ }]*,\\http{&},' $SRCDUMP
   sed -i '/^%/!s,\bhttp.\?://[^ }!]*,\\http{&},' $SRCDUMP

 # CUSTOM STYLE FOR \lstinline
   sed -i 's,\\lstinline!,\\lstinline[style=inline]!,g' $SRCDUMP


  }

 # ------------------------------------------------------------------------- #
 # DO IT AT THE END
 # ------------------------------------------------------------------------- #
   if [ "$OUTPUTFORMAT" == pdf ];then

       # ADD ONLY ONCE
         if [ `echo $preOutput | grep modTeX | wc -l ` -lt 1 ];then
               preOutput="$preOutput modTeX"
         fi

   elif [ "$OUTPUTFORMAT" == html ];then

         sleep 0

   fi
 # ------------------------------------------------------------------------- #
# --------------------------------------------------------------------------- #

function SXHOW() {
     sleep 0
}

# --------------------------------------------------------------------------- #

function CARLINSAYS() {
   if [ "$OUTPUTFORMAT" == pdf ];then
        write2src "\carlinsays{$*}"
   fi
}

# --------------------------------------------------------------------------- #

function MEAS() {

  MEASWHAT=`echo $* | sed 's/ //g'`
  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src "\textbf{...meAs${MEASWHAT}:}"
  fi
}

# --------------------------------------------------------------------------- #

function WWAS() {

  WWASWHAT=`echo $* | cut -d ":" -f 1 | sed 's/ //g'`
  WWASWHATIS=`echo $* | cut -d ":" -f 2- | #
              cut -d ":" -f 2-           | #
              eval $PANDOCACTION         | # DISPLAY/TRANSLATE
              sed 's,</*p>,,g'`            # REMOVE <P> TAGS
  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src "\textbf{...ww.As${WWASWHAT}:}"
        write2src "{\em"
        echo $WWASWHATIS >> $SRCDUMP
        write2src "}"
  fi
}

# --------------------------------------------------------------------------- #

function Q(){

  QIS=`echo $*            | #
       cut -d ":" -f 2-   | #
       eval $PANDOCACTION | # DISPLAY/TRANSLATE
       sed 's,</*p>,,g'`    # REMOVE <P> TAGS

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src ""
        write2src "\textbf{Q:}"
        echo "$QIS" >> $SRCDUMP
  fi

}

# --------------------------------------------------------------------------- #

function A(){

  AIS=`echo $*            | #
       cut -d ":" -f 2-   | #
       eval $PANDOCACTION | # DISPLAY/TRANSLATE
       sed 's,</*p>,,g'`    # REMOVE <P> TAGS

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src "\newline\textbf{A:}"
        echo "$AIS" >> $SRCDUMP
  fi

}

# --------------------------------------------------------------------------- #

function PP() {

  PPASKS=`echo $*            | #
          eval $PANDOCACTION | # DISPLAY/TRANSLATE
          sed 's,</*p>,,g'`    # REMOVE <P> TAGS

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src ""
        write2src "\medskip"
        write2src "\bf"
        echo "$PPASKS" >> $SRCDUMP
  fi

}

# --------------------------------------------------------------------------- #

function JH() {

  JHSAYS=`echo $*            | #
          eval $PANDOCACTION | # DISPLAY/TRANSLATE
          sed 's,</*p>,,g'`    # REMOVE <P> TAGS

  if [ "$OUTPUTFORMAT" == pdf ];then
        write2src ""
        write2src "\nopagebreak[4]"
        write2src "\smallskip"
        write2src "\normalfont"
        echo "$JHSAYS" >> $SRCDUMP
  fi

}

# --------------------------------------------------------------------------- #

