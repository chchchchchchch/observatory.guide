# TODO:

#!% ABOUT
# % BOX
# % BY
# % CSSHERE
# % EXAMPLE
# % EXAMPLES
# % HEADER
#!% HOW
#!% INCLUDE
#!% METHOD
#!% NOTE
# % QUAVERBATIM
# % REMEMBER
# % SEEALSO
# % SEEUNDER
# % SHOW
# % SOURCE
# % URGENCY
# % WARNING
#!% WHAT
#!% WHEN
#!% WHO
#!% WHY

# % SEEHERE: replaces % INCLUDE:
# % SEEALSO: replaces % SEEUNDER:
# % RELATESTO: replaces % SEEALSO:

  PAGEW="314"
  PAGEH="436"


# --------------------------------------------------------------------------- #

function INCLUDE() {

  echo "O INCLUDE STARTS ==================================================="

  # SAVE FUNCTION ID (NOT AS VARIABLE, MAY BE OVERWRITTEN)
  # -------------------------------------------------------------- #
    FID=`date +%s%N`; echo $FID >> ${TMPID}.fid
  
  # ADD MARK TO $SRCDUMP
  # -------------------------------------------------------------- #
    echo -e "\n% $FID\n" >> $SRCDUMP
  
  # PROCESS INPUT !!!!!
  # -------------------------------------------------------------- #
    mdsh2src $*
  
  # REMOVE ADDED FUNCTIONS
  # -------------------------------------------------------------- #
    if [ -f ${TMPID}.fid ]; then
  
    # LOAD LATEST FUNCTION ID
      FID=`tail -n 1 ${TMPID}.fid`
    # REMOVE FROM FUNCTIONS
      sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
    # REMOVE FROM SAVED IDS
      sed -i "/$FID/d" ${TMPID}.fid
    # RELOAD FUNCTIONS
      source $FUNCTIONS
  
    fi

  echo "O INCLUDE ENDS  ===================================================="

}

# --------------------------------------------------------------------------- #

function SEEHERE() {

  SRCBASE=`echo $* | sed 's/ //g'`;SRCPLUS="$SRCBASE/export/txt"
  REPLYPLUS=`curl -s -o /dev/null -IL -w "%{http_code}" $SRCPLUS`
  if [ $REPLYPLUS == '200' ]; then
       SRCGET="$SRCPLUS";else SRCGET="$SRCBASE" ; fi

  SRCHREF=`echo $SRCBASE | sed 's/^[ ]*//'` # LINK TO SRC, EASIFY EDIT

  TMPIDX=`echo $* | md5sum | cut -c 1-8`
  getFile $SRCGET ${TMPID}.${TMPIDX}.mdsh

  if [ -f ${TMPID}.${TMPIDX}.mdsh ];then
  SEEID=`md5sum ${TMPID}.${TMPIDX}.mdsh | cut -d " " -f 1 | #
         base64 | tr  [:upper:] [:lower:] | cut -c 1-8`     #
  SEETITLE=`egrep "^% METHOD:|^% TOCTITLE:" ${TMPID}.${TMPIDX}.mdsh | #
            head -n 1 | cut -d ":" -f 2-`
  if [ `echo $SEETITLE | wc -c` -gt 2 ];then
        echo "${SEEID}:$SEETITLE" >> ${TMPID}.toc
  fi

  if [ "$OUTPUTFORMAT" == pdf ];then 
         write2src "" 
  elif [ "$OUTPUTFORMAT" == html ];then 
         write2src "<span class=\"anchor\" id=\"$SEEID\"></span>" 
  fi

  INCLUDE $SRCGET

  fi

}



# --------------------------------------------------------------------------- #
  buildDescriptor() {

   if [ `echo $* | sed 's/ //g' | wc -c` -gt 1 ];then
     if [ `echo $* | sed 's/[- ]//g' | wc -c` -le 1 ];then
           DESCRIPTION="" # DE-FACTO EMPTY
             THISCLASS="$THISCLASS empty "
           THISDESCRIPTION=`echo $THISDESCRIPTION | # PROVIDED
                            sed 's/:[ ]*$//'`       # RM COLON
     else  DESCRIPTION=`echo "$*" | $PANDOCACTION   | # DISPLAY/TRANSLATE
                        sed 's,</*p>,,g'`             # REMOVE <P> TAGS
     fi
        if [ "$OUTPUTFORMAT" == pdf ];then 
       
               THISCLASS=`echo $THISCLASS | cut -d " " -f 1`
               write2src "\descriptor${THISCLASS}{$DESCRIPTION}" 
       
        elif [ "$OUTPUTFORMAT" == html ];then 
       
               write2src "<span class=\"$THISCLASS descriptor\">" 
               write2src "<span>$THISDESCRIPTION</span> $DESCRIPTION</span>" 

        fi 
     else   echo "NOTHING TO DO"
   fi

  }

# --------------------------------------------------------------------------- #

function METHOD() {

   THISCLASS="method"

  if [ "$OUTPUTFORMAT" == pdf ];then 

   THISDESCRIPTION="Method:"
 
  elif [ "$OUTPUTFORMAT" == html ];then 
 
   THISDESCRIPTION="<a href=\"$SRCHREF\">Method:</a>"

  fi 

  buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHAT() {

  THISCLASS="what";THISDESCRIPTION="What: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHO() {

  THISCLASS="who";THISDESCRIPTION="Who: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHY() {

  THISCLASS="why";THISDESCRIPTION="Why: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WHEN() {

  THISCLASS="when";THISDESCRIPTION="When: ";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function HOW() {

  THISCLASS="how";THISDESCRIPTION="How:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function ABOUT() {

  THISCLASS="about";THISDESCRIPTION="About:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function NOTE() {

  THISCLASS="note";THISDESCRIPTION="Note:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function WARNING() {

  THISCLASS="warning";THISDESCRIPTION="WARNING:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function EXAMPLE() {

  THISCLASS="example";THISDESCRIPTION="Example:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #

function REMEMBER() {

  THISCLASS="remember";THISDESCRIPTION="Remember:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #


function URGENCY() {

  THISCLASS="urgency";THISDESCRIPTION="Urgency:";buildDescriptor $* 

}

# --------------------------------------------------------------------------- #






function SHOW() {
  
   if [ "$OUTPUTFORMAT" == html ];then 
        write2src "<span class=\"tmp\">SHOW IMAGE HERE: $*</span>"
   fi

}


function RELATESTO() {

   if [ "$OUTPUTFORMAT" == html ];then 
   write2src "<span class=\"tmp\">TODO: RELATES TO $*</span>"
   fi

}

function TODO() {

   if [ "$OUTPUTFORMAT" == html ];then 
   write2src "<span class=\"tmp\">TODO: $*</span>"
   fi

}





# --------------------------------------------------------------------------- #

function GROUPING() {

   GROUPINGID=`echo $* | tr [:upper:] [:lower:] | #
               sed 's/[^a-z]//g'`

   if [ ! -f ${TMPID}.grouping.pdf ];then
   getFile $INCLUDEPATH/tgsogroupings.svg ${TMPID}.grouping.svg
   if [ -f ${TMPID}.grouping.svg ];then
   svglayers2pdfpages ${TMPID}.grouping.svg ${TMPID}grouping.pdf
   fi
   fi

   PAGENUM=`grep $GROUPINGID ${TMPID}grouping.pageinfo | #
            head -n 1 | cut -d ":" -f 1 | sed 's/^0*//'`

   if [ `echo $PAGENUM | wc -c` -gt 1 ];then
         PDFCMD="\cleartoleft \
                 \pdfpage{${TMPID}grouping.pdf}{$PAGENUM}{}"
   else
         PDFCMD="\grouping{$*}"
        #echo "NO PAGENUM"
   fi

#       PDFCMD="\grouping{$*}"

   if [ "$OUTPUTFORMAT" == pdf ];then 
  
          write2src "$PDFCMD" 
  
   elif [ "$OUTPUTFORMAT" == html ];then 
  
          HTMLCMD="<span class=\"grouping\">$*</span>"        
          write2src "$HTMLCMD" 
   fi


}

# --------------------------------------------------------------------------- #

function SHOW() {

  # EXTRACT FILE ARGUMENT
  # ------------------------------------ #
    SHOWTHIS=`echo $* | sed 's/ /\n/g' | # DISPLAY ALL / ON SEP LINES
              grep "\.svg$" | head -n 1` # FIND .svg / TAKE FIRST

    if [ "$SHOWTHIS" != "" ];then

        # IF POSSIBLE KEEP THE FILE IN THE SAME LOCATION #
        # TO NOT BREAK IMAGE LINKS                       #
        # ---------------------------------------------- #
          TMPPATH=`realpath $INCLUDEPATH/$SHOWTHIS \
                   2> /dev/null | rev | cut -d "/" -f 2- | rev`
          if [ `echo $TMPPATH | wc -c` -le 1 ];then
          TMPPATH=`realpath $MAINPATH/$SHOWTHIS \
                   2> /dev/null | rev | cut -d "/" -f 2- | rev`
          fi
          if [ `echo $TMPPATH | wc -c` -gt 1 ]
          then  TMPPATH="${TMPPATH}/"
          else  TMPPATH="${TMPID}." ; fi
          TMPSVG="${TMPPATH}"`echo $SHOWTHIS | #
                              md5sum | cut -c 1-12`.svg
        # TRY TO GET THE FILE                            #
        # ---------------------------------------------- #
          getFile $INCLUDEPATH/$SHOWTHIS ${TMPSVG}

        # CHECK/EXTRACT CAPTION
        # ---------------------------------------------- #
          CAPTION=`grep -A 1 "% SHOW:$*" $MDSH | #
                   grep "^% INFO:" | cut -d ":" -f 2- | #
                   $PANDOCACTION   | # DISPLAY/TRANSLATE
                   sed 's,</*p>,,g'` # REMOVE <P> TAGS
         #echo $CAPTION

        # KEEP ON GOING (IF SUCCESSFUL)                  #
        # ---------------------------------------------- #
          if [ -f "$TMPSVG" ];then
     
          # EXTRACT AND CHECK LAYER FLAGS
            NTOCHECK=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
                      grep -v "$SHOWTHIS"      | # IGNORE $SHOWTHIS
                      sed 's/^/e:label="/'     | # ADD LABEL ATTRIBUTE
                      sed 's/$/"/'             | # CLOSE LABEL ATTRIBUTE
                      sed ':a;N;$!ba;s/\n/|/g'`  # COMBINE FOR EGREP
            LNAME=`egrep "$NTOCHECK" $TMPSVG     | # SEARCH IN SVG
                   head -n 1 | sed 's/="/\n="/g' | # EXTRACT FIRST MATCH
                   grep "^=" | cut -d "\"" -f 2`   # EXTRACT NAME
          # EXTRACT PLACEMENT FLAGS
            PFLAG=`echo $* | sed 's/ /\n/g' | # DISPLAY, SPACES2LINEBREAKS
                   egrep '^N$|^b$'          | # EXTRACT VALID FLAGS
                   head -n 1`                 # TAKE FIRST ONE

            if [ "$LNAME" != "" ];then

                extractLayer $TMPSVG $TMPSVG.$LNAME.svg $LNAME
                cropArea $TMPSVG.$LNAME.svg $TMPSVG.$LNAME.crop.svg
    
                PDFID=`echo $* | md5sum | cut -c 1-12`
                PDFHERE="${TMPID}${PDFID}.pdf"
                inkscape --export-pdf=$PDFHERE $TMPSVG.$LNAME.crop.svg
                conformColor $PDFHERE
    
              # cp ${TMPID}${PDFID}.pdf debug-${PDFID}.pdf
   
            # AND NOW LOOK CLOSER ...                                     #
            # ----------------------------------------------------------- #
              PDFSIZE=`pdfinfo $PDFHERE    | #
                       grep "Page size:"   | #
                       sed 's/[^0-9.x]*//g'` #
              PDFW=`echo $PDFSIZE | cut -d "x" -f 1 | #
                    cut -d "." -f 1`                  #
              PDFH=`echo $PDFSIZE | cut -d "x" -f 2 | #
                    cut -d "." -f 1`                  #
              THISIS="";PDFCMD="";PDFSHIFT="0";CNT="0" # RESET
   
            # ... AND CLOSER ...                                          #
            # ----------------------------------------------------------- #
   
             if   [ "$PDFW" -gt 500 ] &&
                  [ "$PDFH" -gt 600 ];     then THISIS="HUGE"
             elif [ "$PDFW" -ge "$PAGEW" ] &&
                  [ "$PDFH" -ge "$PAGEH" ];then THISIS="FULL"
             elif [ "$PDFW" -lt 100 ];     then THISIS="TINY"
             elif [ "$PDFW" -lt 200 ];     then THISIS="SMALL"
             elif [ "$PDFW" -lt 300 ];     then THISIS="BIG"

             fi
             if   [[ $THISIS != *FULL* ]];then
             if   [ "$PDFH" -eq "$PDFW" ];then THISIS="SQUARE $THISIS"
             elif [ "$PDFH" -gt "$PDFW" ];then THISIS="PORTRAIT $THISIS"
             elif [ "$PDFW" -gt "$PDFH" ];then THISIS="LANDSCAPE $THISIS"
             fi
             fi

            # ... AND DRAW THE CONSEQUENCES                               #
            # ----------------------------------------------------------- #
            # echo "$THISIS"; sleep 4
   
              if   [[ $THISIS == *FULL* ]];then
 
                      while [ "$PDFSHIFT" -lt "$PDFW" ];
                       do
                          PDFCMD="$PDFCMD\imgshift{$PDFHERE}{$CNT}"
                          CNT=`expr $CNT + 1`
                          PDFSHIFT=`expr $PAGEW \* $CNT`
                      done
 
              elif [[ $THISIS == *HUGE* ]] && 
                   [[ $THISIS == *PORTRAIT* ]];then
                      echo "PUT ON A SINGLE PAGE"
                      PDFCMD="\imghuge{$PDFHERE}{$CAPTION}{$REF}"
              elif [[ $THISIS != *TINY* ]] && 
                   [[ $THISIS == *LANDSCAPE* ]];then
                      echo "STRETCH OVER TEXTWIDTH" 
                      if [ "$PFLAG" == "N" ];then
                           PDFCMD="\imgwide{$PDFHERE}{$CAPTION}{$REF}"
                      else PDFCMD="\imgwidefloat{$PDFHERE}{$CAPTION}{$REF}";fi
              elif [[ $THISIS == *TINY* ]] && 
                   [[ $THISIS == *SQUARE* ]];then
                      echo "MAKE A SMALL WRAPFIGURE"
                      PDFMCD="\imgsmall{$PDFHERE}{$CAPTION}{$REF}"
              else
                      echo "MAKE A DECENT WRAPFIGURE"  
                      PDFCMD="\imgsmall{$PDFHERE}{$CAPTION}{$REF}"
              fi
 
              if [ "$OUTPUTFORMAT" == pdf ];then 
 
                     write2src "$PDFCMD" 
 
              elif [ "$OUTPUTFORMAT" == html ];then 
             
                     write2src "<span class=\"$THISCLASS descriptor\">" 
                     write2src "<span>$THISDESCRIPTION</span>"
                     write2src "$DESCRIPTION</span>" 
              fi 

            fi
        # else
        #     # echo "$TMPSVG DOES NOT EXIST"
        #     # DO NOTHING
        #     # sleep 0
          fi
    else
          echo "NO INPUT PROVIDED"
    fi

 # FINALLY CLEANUP
 # ------------------------------------------------------------------------ #
   if [ -f "$TMPSVG" ];then rm "$TMPSVG"; fi
   if [ -f "$TMPSVG.$LNAME.svg" ];then rm "$TMPSVG.$LNAME.svg"; fi
   if [ -f "$TMPSVG.$LNAME.crop.svg" ];then rm "$TMPSVG.$LNAME.crop.svg"; fi

 # sleep 10

}

# --------------------------------------------------------------------------- #

function PDF() {

       # GET/SET PAGES/LAYOUT
       # ---------------------------------------------- #
         PAGES=`echo $* | sed 's/ /\n/g'     | # DISPAY ON SEPARATE LINES
                grep '^[0-9]\{1,\}-*[0-9]*$' | # MATCH PATTERN
                head -n 1`                     # TAKE FIRST
         if [ "$PAGES" == "" ];then PAGES="-"; fi # FALLBACK
 
        LAYOUT=`echo $* | sed 's/ /\n/g'         | # DISPAY ON SEPARATE LINES
                grep '^[0-9]\{1,\}x[0-9]\{1,\}$' | # MATCH PATTERN
                head -n 1`                         # TAKE FIRST
          if [ "$LAYOUT" == "" ];then LAYOUT="1x1"; fi # FALLBACK

       # CHECK/EXTRACT CAPTION
       # ---------------------------------------------- #
         CAPTION="" # RESET
         CAPTION=`grep -A 1 "% PDF:$*" $MDSH | #
                  grep "^% INFO:" | cut -d ":" -f 2- | #
                  $PANDOCACTION   | # DISPLAY/TRANSLATE
                  sed 's,</*p>,,g'` # REMOVE <P> TAGS
       # DISABLE CAPTION
       # ---------------------------------------------- #
         LNCMD=`grep -n "^% PDF:$*" $MDSH | # FIND CMD LINE
                head -n 1 | cut -d ":" -f 1` # SELECT LAST MATCH
         sed -i "${LNCMD}s/^% PDF:/%X${THISCMD}:/" $MDSH

       # CHECK/EXTRACT REF
       # ---------------------------------------------- #
         REF=`echo $* | sed 's/ /\n/g'  | # DISPAY ON SEPARATE LINES
              grep '^REF:' | head -n 1  | # MATCH PATTERN/TAKE FIRST
              cut -d ":" -f 2-`           # CUT AFTER :
         if [ "$REF" != "" ];then         # IF REF IS SET
               REF=`echo $REF | md5sum  | # MAKE HASH
                    cut -c 1-16`          # CUT HASH
         fi 

     PDFNOW=`echo $* | sed 's/ /\n/g' | # DISPAY ON SEPARATE LINES
             grep '\.pdf$' | head -n 1` # MATCH PATTERN/TAKE FIRST
     TMPPDF="${TMPID}"`echo $PDFNOW | md5sum | cut -c 1-12`.pdf

     if [ ! -f "$TMPPDF" ];then
          getFile $PDFNOW $TMPPDF
          conformColor $TMPPDF
     fi
     if [ -f "$TMPPDF" ];then
        write2src "\pdfpagesplus{$TMPPDF}{$PAGES}{$LAYOUT}{$CAPTION}{$REF}"
     fi

 }

# --------------------------------------------------------------------------- #
# TODO: MAXIMUM INDENT (RM SPACES)

  getVerbatim() {  

    THISCMD="$1"
    SEPARATOR="^${COMSTART}% [-]{4,} *${COMCLOSE}$"

   # GET LINENUMBER FOR SEPARATOR IN (PROCESSED) $SRCDUMP
   # ----
     LNHEAD=`grep -nE "$SEPARATOR" $SRCDUMP | # FIND SEPARATOR LINE
             tail -n 1 | cut -d ":" -f 1`     # SELECT LAST MATCH

   # EXTRACT TEXT PARTS PROCESSED BEFORE SEPARATOR
   # ----
     head -n $LNHEAD $SRCDUMP   | # DISPLAY UNTIL SEPARATOR LINE
     sed '$d' > ${TMPID}.before    # REMOVE LAST LINE (= SEPARATOR)
     cat ${TMPID}.before > $SRCDUMP # REWRITE $SRCDUMP

   # GET NUMBER FOR CMD LINE IN (UNPROCESSED) MDSH SRC
   # ----
     LNCMD=`grep -n "^% $THISCMD:" $MDSH | # FIND CMD LINE
            head -n 1 | cut -d ":" -f 1`   # SELECT LAST MATCH

   # DISABLE CMD LINE IN MDSH SRC (PREVENT DOUBLE MATCH)
   # ----
     sed -i "${LNCMD}s/^% $THISCMD:/%X${THISCMD}:/" $MDSH

   # EXTRACT PART UNTIL CMD LINE
   # ----
     head -n $LNCMD $MDSH > ${TMPID}.part

   # GREP MARKER IN TMP PART
   # ----
     LNPART=`tac ${TMPID}.part        | # START FROM END
             grep -nE "^% [-]{4,} *$"  | # FIND MARKER
             head -n 1 | cut -d ":" -f 1` # NUM FOR FIRST(=LAST) MATCH

   # EXTRACT UNPROCESSED SECTION
   # ----
     tac ${TMPID}.part           | # SHOW REVERT
     head -n $LNPART             | # UNTIL LINE NUMBER
     tac                         | # RE-REVERT 
     sed '$d' | sed '1d'         | # RM FIRST/LAST (= SEPARATOR/CMD)
     sed -n '/^.\{1\}/,$p' | tac | # FROM FIRST NON-EMPTY LINE TO END/REVERT
     sed -n '/^.\{1\}/,$p' | tac | # FROM FIRST NON-EMPTY LINE TO END/REVERT
     tee > ${TMPID}.xtract  # WRITE TO TMP FILE

     rm ${TMPID}.part # CLEAN UP

  }

# --------------------------------------------------------------------------- #

function BASHCODE() {

   if [ `echo $* | sed 's/ //g' | wc -c` -lt 2 ];then

   getVerbatim "BASHCODE"

   if [ "$OUTPUTFORMAT" == pdf ];then

     #write2src "\lstsetBash"
      write2src '\begin{lstlisting}'
       cat ${TMPID}.xtract >> $SRCDUMP
      write2src '\end{lstlisting}'

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src '<pre><code class="bash">'
       cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</code></pre>'

   fi

   rm ${TMPID}.xtract # CLEAN UP

   else

      if [ "$OUTPUTFORMAT" == pdf ];then
            # TODO!
              sleep 0  
      elif [ "$OUTPUTFORMAT" == html ];then   
         write2src "<code class=\"bash\">$*</code>"
      fi
      LNCMD=`grep -n "^% BASHCODE:" $MDSH | # FIND CMD LINE
             head -n 1 | cut -d ":" -f 1`   # SELECT LAST MATCH
      sed -i "${LNCMD}s/^% BASHCODE:/%XBASHCODE:/" $MDSH

   fi
}

# --------------------------------------------------------------------------- #

function VERBATIM() {

   getVerbatim "VERBATIM"

   if [ "$OUTPUTFORMAT" == pdf ];then

      write2src '\begin{verbatimsmall}'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '\end{verbatimsmall}'

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src '<pre class="verbatim">'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</pre>'

   fi

   rm ${TMPID}.xtract # CLEAN UP

}

# --------------------------------------------------------------------------- #

function VERBATIMWRAP() {

   getVerbatim "VERBATIMWRAP"

   if [ "$OUTPUTFORMAT" == pdf ];then

      write2src '\begin{quaverbatim}'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '\end{quaverbatim}'

   elif [ "$OUTPUTFORMAT" == html ];then

      write2src '<pre class="verbatim wrap">'
      cat ${TMPID}.xtract >> $SRCDUMP
      write2src '</pre>'

   fi

   rm ${TMPID}.xtract # CLEAN UP

}

# --------------------------------------------------------------------------- #

# TODO: OPTIONAL RM LEADING CHARS (E.G: % )

function QUAVERBATIM() {(

  getLines $*
  getFileRange

  if [ -f $COLLECTED ]; then

     if [ "X$HREFMODE" != "XOFF"  ]; then
           WWWLINK=`shortref $*`
           REFCODE=`refsrc $WWWLINK`
           write2src "$REFCODE"
     fi

  # ------------------------------------------------------------------------- #
    if [ "$OUTPUTFORMAT" == pdf ];then
 
    write2src "\begin{quaverbatim}"
     cat $COLLECTED      | # START ...
     cut -c ${INDENT}-   | # REMOVE INDENT
     tee >> $SRCDUMP       # WRITE TO FILE
    write2src "\end{quaverbatim}"
 
    elif [ "$OUTPUTFORMAT" == html ];then
 
    write2src "<pre class=\"quaverbatim\">"
     cat $COLLECTED      | # START ...
     cut -c ${INDENT}-   | # REMOVE INDENT
     tee >> $SRCDUMP       # WRITE TO FILE
    write2src "</pre>"
 
    fi

  # ------------------------------------------------------------------------- #

  rm $COLLECTED

  fi

  if [ -f $SRCLIST ]; then rm $SRCLIST ;fi

)}

# --------------------------------------------------------------------------- #
function TOC() {

 # ------------------------------------------------------------------------- #
   function mkTOC() {
    
       if [ "$OUTPUTFORMAT" == pdf ];then
    
             sleep 0
    
       elif [ "$OUTPUTFORMAT" == html ];then
    
          echo '<div class="toc">' > ${TMPID}.tocprocessed
        ( IFS=$'\n'
          for C in `cat ${TMPID}.toc`
           do CID=`echo $C | cut -d ":" -f 1`
              CTITLE=`echo $C            | #
                      cut -d ":" -f 2-   | #
                      eval $PANDOCACTION | # DISPLAY/TRANSLATE
                      sed 's,</*p>,,g'`    # REMOVE <P> TAGS
             echo "<a href=\"#$CID\">$CTITLE</a>" >> ${TMPID}.tocprocessed
          done; )
          echo '</div>'           >> ${TMPID}.tocprocessed

       fi  
           sed -i "s/$TOCMARKER/\n\n&\n\n/" $OUTPUT
           LNTOC=`grep -n "$TOCMARKER" $OUTPUT | #
                  head -n 1 | cut -d ":" -f 1`
           if [ `echo $LNTOC | wc -c` -gt 1 ];then 
                head -n $LNTOC $OUTPUT | sed '$d' >  ${OUTPUT}.tmp
                cat ${TMPID}.tocprocessed         >> ${OUTPUT}.tmp
                sed "1,${LNTOC}d" $OUTPUT         >> ${OUTPUT}.tmp 
                mv ${OUTPUT}.tmp $OUTPUT
                sed -i "s/$TOCMARKER//g" $OUTPUT
           fi
   }
 # ------------------------------------------------------------------------- #

 # ------------------------------------------------------------------------- #
 # DO IT AT THE END
 # ------------------------------------------------------------------------- #
   if [ "$OUTPUTFORMAT" == pdf ];then
         sleep 0
   elif [ "$OUTPUTFORMAT" == html ];then

      # PLACE A MARKER
      # --------------
        TOCMARKER=`echo TOCHERE | md5sum | cut -c 1-16`
        write2src "$TOCMARKER"

      # DO IT AT THE END
      # ----------------
        if [ `echo $postOutput | wc -c` -gt 1 ];then
              postOutput="$postOutput mkTOC"
        else
              postOutput="mkTOC"
        fi

   fi
 # ------------------------------------------------------------------------- #

 }

# --------------------------------------------------------------------------- #
function NEWPAGE() {

  if [ "$OUTPUTFORMAT" == pdf ];then

        write2src '\newpage'
  fi

}

